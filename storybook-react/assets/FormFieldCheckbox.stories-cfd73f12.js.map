{"version":3,"file":"FormFieldCheckbox.stories-cfd73f12.js","sources":["../../src/stories/FormFieldCheckbox.stories.tsx"],"sourcesContent":["import { Meta, StoryObj } from '@storybook/react';\nimport { Checkbox, FormField, FormFieldDescription, FormLabel, Paragraph } from '@utrecht/component-library-react/dist/css-module/index';\nimport React from 'react';\nimport FormFieldMeta from './FormField.stories';\nconst storyArgTypes = {\n  ...FormFieldMeta.argTypes,\n  checked: {\n    description: 'Checked',\n    control: 'boolean',\n    table: {\n      category: 'Story',\n      defaultValue: {\n        summary: false\n      }\n    }\n  },\n  required: {\n    description: 'Required',\n    control: 'boolean',\n    table: {\n      category: 'Story',\n      defaultValue: {\n        summary: false\n      }\n    }\n  },\n  id: {\n    description: 'ID',\n    type: {\n      name: 'text',\n      required: true\n    },\n    table: {\n      category: 'Story',\n      defaultValue: {\n        summary: ''\n      }\n    }\n  },\n  name: {\n    description: 'Name',\n    control: 'text',\n    table: {\n      category: 'Story',\n      defaultValue: {\n        summary: ''\n      }\n    }\n  },\n  value: {\n    description: 'Value',\n    control: 'text',\n    table: {\n      category: 'Story',\n      defaultValue: {\n        summary: ''\n      }\n    }\n  },\n  label: {\n    name: 'label',\n    type: {\n      name: 'text',\n      required: true\n    },\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      category: 'Story'\n    }\n  },\n  invalidDescription: {\n    name: 'invalidDescription',\n    description: 'Description for invalid input',\n    type: {\n      name: 'text',\n      required: false\n    },\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      category: 'Story'\n    }\n  },\n  description: {\n    description: 'Description',\n    type: {\n      name: 'text',\n      required: false\n    },\n    table: {\n      category: 'Story',\n      defaultValue: {\n        summary: ''\n      }\n    }\n  }\n};\nconst meta = ({\n  title: 'React Component/Form Field/Checkbox',\n  id: 'react-form-field--checkbox',\n  component: FormField,\n  argTypes: storyArgTypes\n} as Meta<typeof FormField>);\nexport default meta;\nconst Template: StoryObj<typeof FormField> = args => {\n  const {\n    checked,\n    description,\n    disabled,\n    id,\n    invalid,\n    invalidDescription,\n    label,\n    name,\n    required,\n    value,\n    type\n  } = args;\n  const descriptionId = description ? `${id}-description` : null;\n  const invalidDescriptionId = invalidDescription ? `${id}-invalid-description` : null;\n  return <FormField invalid={invalid} type={type}>\n      <Paragraph className=\"utrecht-form-field__label utrecht-form-field__label--checkbox\">\n        <FormLabel disabled={disabled} type=\"checkbox\" htmlFor={id}>\n          <Checkbox aria-describedby={[descriptionId, invalidDescriptionId].filter(Boolean).join(' ') || null} className=\"utrecht-form-field__input\" defaultChecked={checked} disabled={disabled} id={id} invalid={invalid} required={required} name={name} value={value} />\n          {label}\n        </FormLabel>\n      </Paragraph>\n      {description ? <FormFieldDescription id={descriptionId} className=\"utrecht-form-field__description\">\n          {description}\n        </FormFieldDescription> : undefined}\n      {invalidDescription ? <FormFieldDescription id={invalidDescriptionId} invalid className=\"utrecht-form-field__description\">\n          {invalidDescription}\n        </FormFieldDescription> : undefined}\n    </FormField>;\n};\nexport const FormFieldCheckbox = Template.bind({});\nFormFieldCheckbox.args = {\n  checked: false,\n  description: 'U kunt ons echt vertrouwen!',\n  disabled: false,\n  id: '43f471c8-c6f1-4867-bc53-9602c06b8a32',\n  invalid: true,\n  invalidDescription: 'U moet akkoord gaan met de algemene voorwaarden, anders kunt u niet verder.',\n  label: 'Ik ga akkoord met de algemene voorwaarden',\n  name: 'consent',\n  value: 'true',\n  required: true,\n  type: 'checkbox'\n};\nFormFieldCheckbox.parameters = {\n  ...FormFieldCheckbox.parameters,\n  storySource: {\n    source: \"args => {\\n  const {\\n    checked,\\n    description,\\n    disabled,\\n    id,\\n    invalid,\\n    invalidDescription,\\n    label,\\n    name,\\n    required,\\n    value,\\n    type\\n  } = args;\\n  const descriptionId = description ? `${id}-description` : null;\\n  const invalidDescriptionId = invalidDescription ? `${id}-invalid-description` : null;\\n  return <FormField invalid={invalid} type={type}>\\n      <Paragraph className=\\\"utrecht-form-field__label utrecht-form-field__label--checkbox\\\">\\n        <FormLabel disabled={disabled} type=\\\"checkbox\\\" htmlFor={id}>\\n          <Checkbox aria-describedby={[descriptionId, invalidDescriptionId].filter(Boolean).join(' ') || null} className=\\\"utrecht-form-field__input\\\" defaultChecked={checked} disabled={disabled} id={id} invalid={invalid} required={required} name={name} value={value} />\\n          {label}\\n        </FormLabel>\\n      </Paragraph>\\n      {description ? <FormFieldDescription id={descriptionId} className=\\\"utrecht-form-field__description\\\">\\n          {description}\\n        </FormFieldDescription> : undefined}\\n      {invalidDescription ? <FormFieldDescription id={invalidDescriptionId} invalid className=\\\"utrecht-form-field__description\\\">\\n          {invalidDescription}\\n        </FormFieldDescription> : undefined}\\n    </FormField>;\\n}\",\n    ...FormFieldCheckbox.parameters?.storySource\n  }\n};"],"names":["storyArgTypes","FormFieldMeta","meta","FormField","Template","args","checked","description","disabled","id","invalid","invalidDescription","label","name","required","value","type","descriptionId","invalidDescriptionId","jsxs","jsx","Paragraph","FormLabel","Checkbox","FormFieldDescription","FormFieldCheckbox","_a"],"mappings":"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"}