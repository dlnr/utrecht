{"version":3,"file":"FormFieldCheckboxGroup.stories-d6a64216.js","sources":["../../src/stories/FormFieldCheckboxGroup.stories.tsx"],"sourcesContent":["import { Meta, StoryObj } from '@storybook/react';\nimport { Checkbox, Fieldset, FieldsetLegend, FormField, FormFieldDescription, FormLabel, Heading, Paragraph } from '@utrecht/component-library-react';\nimport React from 'react';\nimport FormFieldMeta from './FormField.stories';\nconst storyArgTypes = {\n  ...FormFieldMeta.argTypes,\n  headingLevel: {\n    description: 'Heading level for the label. Leave empty for a regular label.',\n    control: {\n      type: 'select'\n    },\n    options: ['', '1', '2', '3', '4', '5', '6'],\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      category: 'Story'\n    }\n  },\n  name: {\n    description: 'Name attribute of the <input> elements',\n    type: {\n      name: 'text',\n      required: true\n    },\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      category: 'Story'\n    }\n  },\n  groupLabel: {\n    description: 'Label of the group',\n    type: {\n      name: 'text',\n      required: true\n    },\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      category: 'Story'\n    }\n  },\n  groupInvalidDescription: {\n    description: 'Description for an invalid group',\n    type: {\n      name: 'text',\n      required: false\n    },\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      category: 'Story'\n    }\n  },\n  groupId: {\n    description: 'ID of the group',\n    type: {\n      name: 'text',\n      required: false\n    },\n    table: {\n      defaultValue: {\n        summary: false\n      },\n      category: 'Story'\n    }\n  },\n  groupDescription: {\n    description: 'Description of the group',\n    type: {\n      name: 'text',\n      required: false\n    },\n    table: {\n      category: 'Story',\n      defaultValue: {\n        summary: ''\n      }\n    }\n  }\n};\nconst meta = ({\n  title: 'React Component/Form Field/Checkbox group',\n  id: 'react-form-field--checkbox-group',\n  component: FormField,\n  argTypes: storyArgTypes\n} as Meta<typeof FormField>);\nexport default meta;\nconst Template: StoryObj<typeof FormField> = args => {\n  const {\n    groupDescription,\n    groupId,\n    groupInvalidDescription,\n    groupLabel,\n    groupName,\n    headingLevel,\n    invalid,\n    options\n  } = args;\n  const groupDescriptionId = groupId && groupDescription ? `${groupId}-description` : undefined;\n  const groupInvalidDescriptionId = groupInvalidDescription ? `${groupId}-invalid-description` : undefined;\n  const groupDescribedByIds = [groupDescriptionId, groupInvalidDescriptionId].filter(Boolean).join(' ');\n  return <Fieldset id={groupId} aria-describedby={groupDescribedByIds} invalid={invalid}>\n      <FieldsetLegend>\n        {headingLevel ? <Heading level={headingLevel}>{groupLabel}</Heading> : groupLabel}\n      </FieldsetLegend>\n      {groupDescriptionId ? <FormFieldDescription id={groupDescriptionId}>{groupDescription}</FormFieldDescription> : undefined}\n      {groupInvalidDescriptionId ? <FormFieldDescription id={groupInvalidDescriptionId} status=\"invalid\">\n          {groupInvalidDescription}\n        </FormFieldDescription> : undefined}\n      {options.map(({\n      description,\n      checked,\n      id,\n      invalid,\n      invalidDescription,\n      label,\n      name,\n      value\n    }) => {\n      const descriptionId = `${id}-description`;\n      const invalidDescriptionId = invalid ? `${id}-invalid-description` : undefined;\n      return <FormField invalid={invalid} type=\"checkbox\" key={id}>\n            <Paragraph className=\"utrecht-form-field__label utrecht-form-field__label--checkbox\">\n              <FormLabel type=\"checkbox\" htmlFor={id}>\n                <Checkbox className=\"utrecht-form-field__input\" id={id} value={value} name={name || groupName} defaultChecked={checked} aria-describedby={[descriptionId, invalidDescriptionId].filter(Boolean).join(' ') || undefined} />\n                {label}\n              </FormLabel>\n            </Paragraph>\n            {description ? <FormFieldDescription id={descriptionId} className=\"utrecht-form-field__description\">\n                {description}\n              </FormFieldDescription> : undefined}\n            {invalidDescription ? <FormFieldDescription id={invalidDescriptionId} status=\"invalid\" className=\"utrecht-form-field__description\">\n                {invalidDescription}\n              </FormFieldDescription> : undefined}\n          </FormField>;\n    })}\n    </Fieldset>;\n};\nexport const FormFieldCheckboxGroup = Template.bind({});\nFormFieldCheckboxGroup.args = {\n  groupId: '7adc261b-20ea-41b8-bc5d-8bdcad6feb91',\n  groupLabel: 'Hoe wil je dat wij contact opnemen?',\n  options: [{\n    id: '4e054ee1-799e-4608-9055-19d3fc0b88e9',\n    name: 'phone',\n    value: 'true',\n    label: 'Telefoon',\n    checked: true\n  }, {\n    id: '238b2692-2460-4bad-93b5-b6def8c3b820',\n    name: 'email',\n    value: 'true',\n    label: 'E-mail'\n  }, {\n    id: '6a1b86d8-f5d2-4852-9f95-b6690ac3d0e2',\n    name: 'mail',\n    value: 'true',\n    label: 'Brief'\n  }]\n};\nFormFieldCheckboxGroup.parameters = {\n  ...FormFieldCheckboxGroup.parameters,\n  storySource: {\n    source: \"args => {\\n  const {\\n    groupDescription,\\n    groupId,\\n    groupInvalidDescription,\\n    groupLabel,\\n    groupName,\\n    headingLevel,\\n    invalid,\\n    options\\n  } = args;\\n  const groupDescriptionId = groupId && groupDescription ? `${groupId}-description` : undefined;\\n  const groupInvalidDescriptionId = groupInvalidDescription ? `${groupId}-invalid-description` : undefined;\\n  const groupDescribedByIds = [groupDescriptionId, groupInvalidDescriptionId].filter(Boolean).join(' ');\\n  return <Fieldset id={groupId} aria-describedby={groupDescribedByIds} invalid={invalid}>\\n      <FieldsetLegend>\\n        {headingLevel ? <Heading level={headingLevel}>{groupLabel}</Heading> : groupLabel}\\n      </FieldsetLegend>\\n      {groupDescriptionId ? <FormFieldDescription id={groupDescriptionId}>{groupDescription}</FormFieldDescription> : undefined}\\n      {groupInvalidDescriptionId ? <FormFieldDescription id={groupInvalidDescriptionId} status=\\\"invalid\\\">\\n          {groupInvalidDescription}\\n        </FormFieldDescription> : undefined}\\n      {options.map(({\\n      description,\\n      checked,\\n      id,\\n      invalid,\\n      invalidDescription,\\n      label,\\n      name,\\n      value\\n    }) => {\\n      const descriptionId = `${id}-description`;\\n      const invalidDescriptionId = invalid ? `${id}-invalid-description` : undefined;\\n      return <FormField invalid={invalid} type=\\\"checkbox\\\" key={id}>\\n            <Paragraph className=\\\"utrecht-form-field__label utrecht-form-field__label--checkbox\\\">\\n              <FormLabel type=\\\"checkbox\\\" htmlFor={id}>\\n                <Checkbox className=\\\"utrecht-form-field__input\\\" id={id} value={value} name={name || groupName} defaultChecked={checked} aria-describedby={[descriptionId, invalidDescriptionId].filter(Boolean).join(' ') || undefined} />\\n                {label}\\n              </FormLabel>\\n            </Paragraph>\\n            {description ? <FormFieldDescription id={descriptionId} className=\\\"utrecht-form-field__description\\\">\\n                {description}\\n              </FormFieldDescription> : undefined}\\n            {invalidDescription ? <FormFieldDescription id={invalidDescriptionId} status=\\\"invalid\\\" className=\\\"utrecht-form-field__description\\\">\\n                {invalidDescription}\\n              </FormFieldDescription> : undefined}\\n          </FormField>;\\n    })}\\n    </Fieldset>;\\n}\",\n    ...FormFieldCheckboxGroup.parameters?.storySource\n  }\n};"],"names":["storyArgTypes","FormFieldMeta","meta","FormField","Template","args","groupDescription","groupId","groupInvalidDescription","groupLabel","groupName","headingLevel","invalid","options","groupDescriptionId","groupInvalidDescriptionId","groupDescribedByIds","Fieldset","jsx","FieldsetLegend","Heading","FormFieldDescription","description","checked","id","invalidDescription","label","name","value","descriptionId","invalidDescriptionId","jsxs","Paragraph","FormLabel","Checkbox","FormFieldCheckboxGroup","_a"],"mappings":"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"}