{"version":3,"file":"index-e61b4b29-3ad362fb.js","sources":["../../../web-component-library-stencil/dist/esm/index-e61b4b29.js"],"sourcesContent":["const NAMESPACE = 'utrecht';\n\n/**\n * Virtual DOM patching algorithm based on Snabbdom by\n * Simon Friis Vindum (@paldepind)\n * Licensed under the MIT License\n * https://github.com/snabbdom/snabbdom/blob/master/LICENSE\n *\n * Modified for Stencil's renderer and slot projection\n */\nlet scopeId;\nlet contentRef;\nlet hostTagName;\nlet useNativeShadowDom = false;\nlet checkSlotFallbackVisibility = false;\nlet checkSlotRelocate = false;\nlet isSvgMode = false;\nlet queuePending = false;\nconst createTime = (fnName, tagName = '') => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst uniqueTime = (key, measureText) => {\n    {\n        return () => {\n            return;\n        };\n    }\n};\nconst HYDRATED_CSS = '{visibility:hidden}.hydrated{visibility:inherit}';\n/**\n * Default style mode id\n */\n/**\n * Reusable empty obj/array\n * Don't add values to these!!\n */\nconst EMPTY_OBJ = {};\n/**\n * Namespaces\n */\nconst SVG_NS = 'http://www.w3.org/2000/svg';\nconst HTML_NS = 'http://www.w3.org/1999/xhtml';\nconst isDef = (v) => v != null;\nconst isComplexType = (o) => {\n    // https://jsperf.com/typeof-fn-object/5\n    o = typeof o;\n    return o === 'object' || o === 'function';\n};\n/**\n * Production h() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\n// const stack: any[] = [];\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, child?: d.ChildType): d.VNode;\n// export function h(nodeName: string | d.FunctionalComponent, vnodeData: d.PropsType, ...children: d.ChildType[]): d.VNode;\nconst h = (nodeName, vnodeData, ...children) => {\n    let child = null;\n    let key = null;\n    let slotName = null;\n    let simple = false;\n    let lastSimple = false;\n    const vNodeChildren = [];\n    const walk = (c) => {\n        for (let i = 0; i < c.length; i++) {\n            child = c[i];\n            if (Array.isArray(child)) {\n                walk(child);\n            }\n            else if (child != null && typeof child !== 'boolean') {\n                if ((simple = typeof nodeName !== 'function' && !isComplexType(child))) {\n                    child = String(child);\n                }\n                if (simple && lastSimple) {\n                    // If the previous child was simple (string), we merge both\n                    vNodeChildren[vNodeChildren.length - 1].$text$ += child;\n                }\n                else {\n                    // Append a new vNode, if it's text, we create a text vNode\n                    vNodeChildren.push(simple ? newVNode(null, child) : child);\n                }\n                lastSimple = simple;\n            }\n        }\n    };\n    walk(children);\n    if (vnodeData) {\n        // normalize class / classname attributes\n        if (vnodeData.key) {\n            key = vnodeData.key;\n        }\n        if (vnodeData.name) {\n            slotName = vnodeData.name;\n        }\n        {\n            const classData = vnodeData.className || vnodeData.class;\n            if (classData) {\n                vnodeData.class =\n                    typeof classData !== 'object'\n                        ? classData\n                        : Object.keys(classData)\n                            .filter((k) => classData[k])\n                            .join(' ');\n            }\n        }\n    }\n    const vnode = newVNode(nodeName, null);\n    vnode.$attrs$ = vnodeData;\n    if (vNodeChildren.length > 0) {\n        vnode.$children$ = vNodeChildren;\n    }\n    {\n        vnode.$key$ = key;\n    }\n    {\n        vnode.$name$ = slotName;\n    }\n    return vnode;\n};\nconst newVNode = (tag, text) => {\n    const vnode = {\n        $flags$: 0,\n        $tag$: tag,\n        $text$: text,\n        $elm$: null,\n        $children$: null,\n    };\n    {\n        vnode.$attrs$ = null;\n    }\n    {\n        vnode.$key$ = null;\n    }\n    {\n        vnode.$name$ = null;\n    }\n    return vnode;\n};\nconst Host = {};\nconst isHost = (node) => node && node.$tag$ === Host;\n/**\n * Parse a new property value for a given property type.\n *\n * While the prop value can reasonably be expected to be of `any` type as far as TypeScript's type checker is concerned,\n * it is not safe to assume that the string returned by evaluating `typeof propValue` matches:\n *   1. `any`, the type given to `propValue` in the function signature\n *   2. the type stored from `propType`.\n *\n * This function provides the capability to parse/coerce a property's value to potentially any other JavaScript type.\n *\n * Property values represented in TSX preserve their type information. In the example below, the number 0 is passed to\n * a component. This `propValue` will preserve its type information (`typeof propValue === 'number'`). Note that is\n * based on the type of the value being passed in, not the type declared of the class member decorated with `@Prop`.\n * ```tsx\n * <my-cmp prop-val={0}></my-cmp>\n * ```\n *\n * HTML prop values on the other hand, will always a string\n *\n * @param propValue the new value to coerce to some type\n * @param propType the type of the prop, expressed as a binary number\n * @returns the parsed/coerced value\n */\nconst parsePropertyValue = (propValue, propType) => {\n    // ensure this value is of the correct prop type\n    if (propValue != null && !isComplexType(propValue)) {\n        if (propType & 4 /* MEMBER_FLAGS.Boolean */) {\n            // per the HTML spec, any string value means it is a boolean true value\n            // but we'll cheat here and say that the string \"false\" is the boolean false\n            return propValue === 'false' ? false : propValue === '' || !!propValue;\n        }\n        if (propType & 2 /* MEMBER_FLAGS.Number */) {\n            // force it to be a number\n            return parseFloat(propValue);\n        }\n        if (propType & 1 /* MEMBER_FLAGS.String */) {\n            // could have been passed as a number or boolean\n            // but we still want it as a string\n            return String(propValue);\n        }\n        // redundant return here for better minification\n        return propValue;\n    }\n    // not sure exactly what type we want\n    // so no need to change to a different type\n    return propValue;\n};\nconst getElement = (ref) => (getHostRef(ref).$hostElement$ );\nconst createEvent = (ref, name, flags) => {\n    const elm = getElement(ref);\n    return {\n        emit: (detail) => {\n            return emitEvent(elm, name, {\n                bubbles: !!(flags & 4 /* EVENT_FLAGS.Bubbles */),\n                composed: !!(flags & 2 /* EVENT_FLAGS.Composed */),\n                cancelable: !!(flags & 1 /* EVENT_FLAGS.Cancellable */),\n                detail,\n            });\n        },\n    };\n};\n/**\n * Helper function to create & dispatch a custom Event on a provided target\n * @param elm the target of the Event\n * @param name the name to give the custom Event\n * @param opts options for configuring a custom Event\n * @returns the custom Event\n */\nconst emitEvent = (elm, name, opts) => {\n    const ev = plt.ce(name, opts);\n    elm.dispatchEvent(ev);\n    return ev;\n};\nconst rootAppliedStyles = /*@__PURE__*/ new WeakMap();\nconst registerStyle = (scopeId, cssText, allowCS) => {\n    let style = styles.get(scopeId);\n    if (supportsConstructableStylesheets && allowCS) {\n        style = (style || new CSSStyleSheet());\n        if (typeof style === 'string') {\n            style = cssText;\n        }\n        else {\n            style.replaceSync(cssText);\n        }\n    }\n    else {\n        style = cssText;\n    }\n    styles.set(scopeId, style);\n};\nconst addStyle = (styleContainerNode, cmpMeta, mode, hostElm) => {\n    let scopeId = getScopeId(cmpMeta);\n    const style = styles.get(scopeId);\n    // if an element is NOT connected then getRootNode() will return the wrong root node\n    // so the fallback is to always use the document for the root node in those cases\n    styleContainerNode = styleContainerNode.nodeType === 11 /* NODE_TYPE.DocumentFragment */ ? styleContainerNode : doc;\n    if (style) {\n        if (typeof style === 'string') {\n            styleContainerNode = styleContainerNode.head || styleContainerNode;\n            let appliedStyles = rootAppliedStyles.get(styleContainerNode);\n            let styleElm;\n            if (!appliedStyles) {\n                rootAppliedStyles.set(styleContainerNode, (appliedStyles = new Set()));\n            }\n            if (!appliedStyles.has(scopeId)) {\n                {\n                    {\n                        styleElm = doc.createElement('style');\n                        styleElm.innerHTML = style;\n                    }\n                    const nonceElm = styleContainerNode.ownerDocument.querySelector('style[nonce]');\n                    if (nonceElm) {\n                      styleElm.setAttribute('nonce', nonceElm.getAttribute('nonce'));\n                      console.log(`CSP nonce-${nonceElm.getAttribute('nonce')}`);\n                    }\n                    styleContainerNode.insertBefore(styleElm, styleContainerNode.querySelector('link'));\n                }\n                if (appliedStyles) {\n                    appliedStyles.add(scopeId);\n                }\n            }\n        }\n        else if (!styleContainerNode.adoptedStyleSheets.includes(style)) {\n            styleContainerNode.adoptedStyleSheets = [...styleContainerNode.adoptedStyleSheets, style];\n        }\n    }\n    return scopeId;\n};\nconst attachStyles = (hostRef) => {\n    const cmpMeta = hostRef.$cmpMeta$;\n    const elm = hostRef.$hostElement$;\n    const flags = cmpMeta.$flags$;\n    const endAttachStyles = createTime('attachStyles', cmpMeta.$tagName$);\n    const scopeId = addStyle(elm.shadowRoot ? elm.shadowRoot : elm.getRootNode(), cmpMeta);\n    if (flags & 10 /* CMP_FLAGS.needsScopedEncapsulation */) {\n        // only required when we're NOT using native shadow dom (slot)\n        // or this browser doesn't support native shadow dom\n        // and this host element was NOT created with SSR\n        // let's pick out the inner content for slot projection\n        // create a node to represent where the original\n        // content was first placed, which is useful later on\n        // DOM WRITE!!\n        elm['s-sc'] = scopeId;\n        elm.classList.add(scopeId + '-h');\n    }\n    endAttachStyles();\n};\nconst getScopeId = (cmp, mode) => 'sc-' + (cmp.$tagName$);\n/**\n * Production setAccessor() function based on Preact by\n * Jason Miller (@developit)\n * Licensed under the MIT License\n * https://github.com/developit/preact/blob/master/LICENSE\n *\n * Modified for Stencil's compiler and vdom\n */\nconst setAccessor = (elm, memberName, oldValue, newValue, isSvg, flags) => {\n    if (oldValue !== newValue) {\n        let isProp = isMemberInElement(elm, memberName);\n        let ln = memberName.toLowerCase();\n        if (memberName === 'class') {\n            const classList = elm.classList;\n            const oldClasses = parseClassList(oldValue);\n            const newClasses = parseClassList(newValue);\n            classList.remove(...oldClasses.filter((c) => c && !newClasses.includes(c)));\n            classList.add(...newClasses.filter((c) => c && !oldClasses.includes(c)));\n        }\n        else if (memberName === 'key')\n            ;\n        else if ((!isProp ) &&\n            memberName[0] === 'o' &&\n            memberName[1] === 'n') {\n            // Event Handlers\n            // so if the member name starts with \"on\" and the 3rd characters is\n            // a capital letter, and it's not already a member on the element,\n            // then we're assuming it's an event listener\n            if (memberName[2] === '-') {\n                // on- prefixed events\n                // allows to be explicit about the dom event to listen without any magic\n                // under the hood:\n                // <my-cmp on-click> // listens for \"click\"\n                // <my-cmp on-Click> // listens for \"Click\"\n                // <my-cmp on-ionChange> // listens for \"ionChange\"\n                // <my-cmp on-EVENTS> // listens for \"EVENTS\"\n                memberName = memberName.slice(3);\n            }\n            else if (isMemberInElement(win, ln)) {\n                // standard event\n                // the JSX attribute could have been \"onMouseOver\" and the\n                // member name \"onmouseover\" is on the window's prototype\n                // so let's add the listener \"mouseover\", which is all lowercased\n                memberName = ln.slice(2);\n            }\n            else {\n                // custom event\n                // the JSX attribute could have been \"onMyCustomEvent\"\n                // so let's trim off the \"on\" prefix and lowercase the first character\n                // and add the listener \"myCustomEvent\"\n                // except for the first character, we keep the event name case\n                memberName = ln[2] + memberName.slice(3);\n            }\n            if (oldValue) {\n                plt.rel(elm, memberName, oldValue, false);\n            }\n            if (newValue) {\n                plt.ael(elm, memberName, newValue, false);\n            }\n        }\n        else {\n            // Set property if it exists and it's not a SVG\n            const isComplex = isComplexType(newValue);\n            if ((isProp || (isComplex && newValue !== null)) && !isSvg) {\n                try {\n                    if (!elm.tagName.includes('-')) {\n                        const n = newValue == null ? '' : newValue;\n                        // Workaround for Safari, moving the <input> caret when re-assigning the same valued\n                        if (memberName === 'list') {\n                            isProp = false;\n                        }\n                        else if (oldValue == null || elm[memberName] != n) {\n                            elm[memberName] = n;\n                        }\n                    }\n                    else {\n                        elm[memberName] = newValue;\n                    }\n                }\n                catch (e) { }\n            }\n            if (newValue == null || newValue === false) {\n                if (newValue !== false || elm.getAttribute(memberName) === '') {\n                    {\n                        elm.removeAttribute(memberName);\n                    }\n                }\n            }\n            else if ((!isProp || flags & 4 /* VNODE_FLAGS.isHost */ || isSvg) && !isComplex) {\n                newValue = newValue === true ? '' : newValue;\n                {\n                    elm.setAttribute(memberName, newValue);\n                }\n            }\n        }\n    }\n};\nconst parseClassListRegex = /\\s/;\nconst parseClassList = (value) => (!value ? [] : value.split(parseClassListRegex));\nconst updateElement = (oldVnode, newVnode, isSvgMode, memberName) => {\n    // if the element passed in is a shadow root, which is a document fragment\n    // then we want to be adding attrs/props to the shadow root's \"host\" element\n    // if it's not a shadow root, then we add attrs/props to the same element\n    const elm = newVnode.$elm$.nodeType === 11 /* NODE_TYPE.DocumentFragment */ && newVnode.$elm$.host\n        ? newVnode.$elm$.host\n        : newVnode.$elm$;\n    const oldVnodeAttrs = (oldVnode && oldVnode.$attrs$) || EMPTY_OBJ;\n    const newVnodeAttrs = newVnode.$attrs$ || EMPTY_OBJ;\n    {\n        // remove attributes no longer present on the vnode by setting them to undefined\n        for (memberName in oldVnodeAttrs) {\n            if (!(memberName in newVnodeAttrs)) {\n                setAccessor(elm, memberName, oldVnodeAttrs[memberName], undefined, isSvgMode, newVnode.$flags$);\n            }\n        }\n    }\n    // add new & update changed attributes\n    for (memberName in newVnodeAttrs) {\n        setAccessor(elm, memberName, oldVnodeAttrs[memberName], newVnodeAttrs[memberName], isSvgMode, newVnode.$flags$);\n    }\n};\n/**\n * Create a DOM Node corresponding to one of the children of a given VNode.\n *\n * @param oldParentVNode the parent VNode from the previous render\n * @param newParentVNode the parent VNode from the current render\n * @param childIndex the index of the VNode, in the _new_ parent node's\n * children, for which we will create a new DOM node\n * @param parentElm the parent DOM node which our new node will be a child of\n * @returns the newly created node\n */\nconst createElm = (oldParentVNode, newParentVNode, childIndex, parentElm) => {\n    // tslint:disable-next-line: prefer-const\n    const newVNode = newParentVNode.$children$[childIndex];\n    let i = 0;\n    let elm;\n    let childNode;\n    let oldVNode;\n    if (!useNativeShadowDom) {\n        // remember for later we need to check to relocate nodes\n        checkSlotRelocate = true;\n        if (newVNode.$tag$ === 'slot') {\n            if (scopeId) {\n                // scoped css needs to add its scoped id to the parent element\n                parentElm.classList.add(scopeId + '-s');\n            }\n            newVNode.$flags$ |= newVNode.$children$\n                ? // slot element has fallback content\n                    2 /* VNODE_FLAGS.isSlotFallback */\n                : // slot element does not have fallback content\n                    1 /* VNODE_FLAGS.isSlotReference */;\n        }\n    }\n    if (newVNode.$text$ !== null) {\n        // create text node\n        elm = newVNode.$elm$ = doc.createTextNode(newVNode.$text$);\n    }\n    else if (newVNode.$flags$ & 1 /* VNODE_FLAGS.isSlotReference */) {\n        // create a slot reference node\n        elm = newVNode.$elm$ =\n            doc.createTextNode('');\n    }\n    else {\n        if (!isSvgMode) {\n            isSvgMode = newVNode.$tag$ === 'svg';\n        }\n        // create element\n        elm = newVNode.$elm$ = (doc.createElementNS(isSvgMode ? SVG_NS : HTML_NS, newVNode.$flags$ & 2 /* VNODE_FLAGS.isSlotFallback */\n                ? 'slot-fb'\n                : newVNode.$tag$)\n            );\n        if (isSvgMode && newVNode.$tag$ === 'foreignObject') {\n            isSvgMode = false;\n        }\n        // add css classes, attrs, props, listeners, etc.\n        {\n            updateElement(null, newVNode, isSvgMode);\n        }\n        if (isDef(scopeId) && elm['s-si'] !== scopeId) {\n            // if there is a scopeId and this is the initial render\n            // then let's add the scopeId as a css class\n            elm.classList.add((elm['s-si'] = scopeId));\n        }\n        if (newVNode.$children$) {\n            for (i = 0; i < newVNode.$children$.length; ++i) {\n                // create the node\n                childNode = createElm(oldParentVNode, newVNode, i, elm);\n                // return node could have been null\n                if (childNode) {\n                    // append our new node\n                    elm.appendChild(childNode);\n                }\n            }\n        }\n        {\n            if (newVNode.$tag$ === 'svg') {\n                // Only reset the SVG context when we're exiting <svg> element\n                isSvgMode = false;\n            }\n            else if (elm.tagName === 'foreignObject') {\n                // Reenter SVG context when we're exiting <foreignObject> element\n                isSvgMode = true;\n            }\n        }\n    }\n    {\n        elm['s-hn'] = hostTagName;\n        if (newVNode.$flags$ & (2 /* VNODE_FLAGS.isSlotFallback */ | 1 /* VNODE_FLAGS.isSlotReference */)) {\n            // remember the content reference comment\n            elm['s-sr'] = true;\n            // remember the content reference comment\n            elm['s-cr'] = contentRef;\n            // remember the slot name, or empty string for default slot\n            elm['s-sn'] = newVNode.$name$ || '';\n            // check if we've got an old vnode for this slot\n            oldVNode = oldParentVNode && oldParentVNode.$children$ && oldParentVNode.$children$[childIndex];\n            if (oldVNode && oldVNode.$tag$ === newVNode.$tag$ && oldParentVNode.$elm$) {\n                // we've got an old slot vnode and the wrapper is being replaced\n                // so let's move the old slot content back to it's original location\n                putBackInOriginalLocation(oldParentVNode.$elm$, false);\n            }\n        }\n    }\n    return elm;\n};\nconst putBackInOriginalLocation = (parentElm, recursive) => {\n    plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n    const oldSlotChildNodes = parentElm.childNodes;\n    for (let i = oldSlotChildNodes.length - 1; i >= 0; i--) {\n        const childNode = oldSlotChildNodes[i];\n        if (childNode['s-hn'] !== hostTagName && childNode['s-ol']) {\n            // // this child node in the old element is from another component\n            // // remove this node from the old slot's parent\n            // childNode.remove();\n            // and relocate it back to it's original location\n            parentReferenceNode(childNode).insertBefore(childNode, referenceNode(childNode));\n            // remove the old original location comment entirely\n            // later on the patch function will know what to do\n            // and move this to the correct spot in need be\n            childNode['s-ol'].remove();\n            childNode['s-ol'] = undefined;\n            checkSlotRelocate = true;\n        }\n        if (recursive) {\n            putBackInOriginalLocation(childNode, recursive);\n        }\n    }\n    plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n};\nconst addVnodes = (parentElm, before, parentVNode, vnodes, startIdx, endIdx) => {\n    let containerElm = ((parentElm['s-cr'] && parentElm['s-cr'].parentNode) || parentElm);\n    let childNode;\n    if (containerElm.shadowRoot && containerElm.tagName === hostTagName) {\n        containerElm = containerElm.shadowRoot;\n    }\n    for (; startIdx <= endIdx; ++startIdx) {\n        if (vnodes[startIdx]) {\n            childNode = createElm(null, parentVNode, startIdx, parentElm);\n            if (childNode) {\n                vnodes[startIdx].$elm$ = childNode;\n                containerElm.insertBefore(childNode, referenceNode(before) );\n            }\n        }\n    }\n};\nconst removeVnodes = (vnodes, startIdx, endIdx, vnode, elm) => {\n    for (; startIdx <= endIdx; ++startIdx) {\n        if ((vnode = vnodes[startIdx])) {\n            elm = vnode.$elm$;\n            {\n                // we're removing this element\n                // so it's possible we need to show slot fallback content now\n                checkSlotFallbackVisibility = true;\n                if (elm['s-ol']) {\n                    // remove the original location comment\n                    elm['s-ol'].remove();\n                }\n                else {\n                    // it's possible that child nodes of the node\n                    // that's being removed are slot nodes\n                    putBackInOriginalLocation(elm, true);\n                }\n            }\n            // remove the vnode's element from the dom\n            elm.remove();\n        }\n    }\n};\n/**\n * Reconcile the children of a new VNode with the children of an old VNode by\n * traversing the two collections of children, identifying nodes that are\n * conserved or changed, calling out to `patch` to make any necessary\n * updates to the DOM, and rearranging DOM nodes as needed.\n *\n * The algorithm for reconciling children works by analyzing two 'windows' onto\n * the two arrays of children (`oldCh` and `newCh`). We keep track of the\n * 'windows' by storing start and end indices and references to the\n * corresponding array entries. Initially the two 'windows' are basically equal\n * to the entire array, but we progressively narrow the windows until there are\n * no children left to update by doing the following:\n *\n * 1. Skip any `null` entries at the beginning or end of the two arrays, so\n *    that if we have an initial array like the following we'll end up dealing\n *    only with a window bounded by the highlighted elements:\n *\n *    [null, null, VNode1 , ... , VNode2, null, null]\n *                 ^^^^^^         ^^^^^^\n *\n * 2. Check to see if the elements at the head and tail positions are equal\n *    across the windows. This will basically detect elements which haven't\n *    been added, removed, or changed position, i.e. if you had the following\n *    VNode elements (represented as HTML):\n *\n *    oldVNode: `<div><p><span>HEY</span></p></div>`\n *    newVNode: `<div><p><span>THERE</span></p></div>`\n *\n *    Then when comparing the children of the `<div>` tag we check the equality\n *    of the VNodes corresponding to the `<p>` tags and, since they are the\n *    same tag in the same position, we'd be able to avoid completely\n *    re-rendering the subtree under them with a new DOM element and would just\n *    call out to `patch` to handle reconciling their children and so on.\n *\n * 3. Check, for both windows, to see if the element at the beginning of the\n *    window corresponds to the element at the end of the other window. This is\n *    a heuristic which will let us identify _some_ situations in which\n *    elements have changed position, for instance it _should_ detect that the\n *    children nodes themselves have not changed but merely moved in the\n *    following example:\n *\n *    oldVNode: `<div><element-one /><element-two /></div>`\n *    newVNode: `<div><element-two /><element-one /></div>`\n *\n *    If we find cases like this then we also need to move the concrete DOM\n *    elements corresponding to the moved children to write the re-order to the\n *    DOM.\n *\n * 4. Finally, if VNodes have the `key` attribute set on them we check for any\n *    nodes in the old children which have the same key as the first element in\n *    our window on the new children. If we find such a node we handle calling\n *    out to `patch`, moving relevant DOM nodes, and so on, in accordance with\n *    what we find.\n *\n * Finally, once we've narrowed our 'windows' to the point that either of them\n * collapse (i.e. they have length 0) we then handle any remaining VNode\n * insertion or deletion that needs to happen to get a DOM state that correctly\n * reflects the new child VNodes. If, for instance, after our window on the old\n * children has collapsed we still have more nodes on the new children that\n * we haven't dealt with yet then we need to add them, or if the new children\n * collapse but we still have unhandled _old_ children then we need to make\n * sure the corresponding DOM nodes are removed.\n *\n * @param parentElm the node into which the parent VNode is rendered\n * @param oldCh the old children of the parent node\n * @param newVNode the new VNode which will replace the parent\n * @param newCh the new children of the parent node\n */\nconst updateChildren = (parentElm, oldCh, newVNode, newCh) => {\n    let oldStartIdx = 0;\n    let newStartIdx = 0;\n    let idxInOld = 0;\n    let i = 0;\n    let oldEndIdx = oldCh.length - 1;\n    let oldStartVnode = oldCh[0];\n    let oldEndVnode = oldCh[oldEndIdx];\n    let newEndIdx = newCh.length - 1;\n    let newStartVnode = newCh[0];\n    let newEndVnode = newCh[newEndIdx];\n    let node;\n    let elmToMove;\n    while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {\n        if (oldStartVnode == null) {\n            // VNode might have been moved left\n            oldStartVnode = oldCh[++oldStartIdx];\n        }\n        else if (oldEndVnode == null) {\n            oldEndVnode = oldCh[--oldEndIdx];\n        }\n        else if (newStartVnode == null) {\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (newEndVnode == null) {\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newStartVnode)) {\n            // if the start nodes are the same then we should patch the new VNode\n            // onto the old one, and increment our `newStartIdx` and `oldStartIdx`\n            // indices to reflect that. We don't need to move any DOM Nodes around\n            // since things are matched up in order.\n            patch(oldStartVnode, newStartVnode);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newEndVnode)) {\n            // likewise, if the end nodes are the same we patch new onto old and\n            // decrement our end indices, and also likewise in this case we don't\n            // need to move any DOM Nodes.\n            patch(oldEndVnode, newEndVnode);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldStartVnode, newEndVnode)) {\n            // case: \"Vnode moved right\"\n            //\n            // We've found that the last node in our window on the new children is\n            // the same VNode as the _first_ node in our window on the old children\n            // we're dealing with now. Visually, this is the layout of these two\n            // nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newEndVnode` onto `oldStartVnode`\n            // and move the DOM element for `oldStartVnode`.\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldStartVnode.$elm$.parentNode, false);\n            }\n            patch(oldStartVnode, newEndVnode);\n            // We need to move the element for `oldStartVnode` into a position which\n            // will be appropriate for `newEndVnode`. For this we can use\n            // `.insertBefore` and `oldEndVnode.$elm$.nextSibling`. If there is a\n            // sibling for `oldEndVnode.$elm$` then we want to move the DOM node for\n            // `oldStartVnode` between `oldEndVnode` and it's sibling, like so:\n            //\n            // <old-start-node />\n            // <some-intervening-node />\n            // <old-end-node />\n            // <!-- ->              <-- `oldStartVnode.$elm$` should be inserted here\n            // <next-sibling />\n            //\n            // If instead `oldEndVnode.$elm$` has no sibling then we just want to put\n            // the node for `oldStartVnode` at the end of the children of\n            // `parentElm`. Luckily, `Node.nextSibling` will return `null` if there\n            // aren't any siblings, and passing `null` to `Node.insertBefore` will\n            // append it to the children of the parent element.\n            parentElm.insertBefore(oldStartVnode.$elm$, oldEndVnode.$elm$.nextSibling);\n            oldStartVnode = oldCh[++oldStartIdx];\n            newEndVnode = newCh[--newEndIdx];\n        }\n        else if (isSameVnode(oldEndVnode, newStartVnode)) {\n            // case: \"Vnode moved left\"\n            //\n            // We've found that the first node in our window on the new children is\n            // the same VNode as the _last_ node in our window on the old children.\n            // Visually, this is the layout of these two nodes:\n            //\n            // newCh: [..., newStartVnode , ... , newEndVnode , ...]\n            //              ^^^^^^^^^^^^^\n            // oldCh: [..., oldStartVnode , ... , oldEndVnode , ...]\n            //                                    ^^^^^^^^^^^\n            //\n            // In this situation we need to patch `newStartVnode` onto `oldEndVnode`\n            // (which will handle updating any changed attributes, reconciling their\n            // children etc) but we also need to move the DOM node to which\n            // `oldEndVnode` corresponds.\n            if ((oldStartVnode.$tag$ === 'slot' || newEndVnode.$tag$ === 'slot')) {\n                putBackInOriginalLocation(oldEndVnode.$elm$.parentNode, false);\n            }\n            patch(oldEndVnode, newStartVnode);\n            // We've already checked above if `oldStartVnode` and `newStartVnode` are\n            // the same node, so since we're here we know that they are not. Thus we\n            // can move the element for `oldEndVnode` _before_ the element for\n            // `oldStartVnode`, leaving `oldStartVnode` to be reconciled in the\n            // future.\n            parentElm.insertBefore(oldEndVnode.$elm$, oldStartVnode.$elm$);\n            oldEndVnode = oldCh[--oldEndIdx];\n            newStartVnode = newCh[++newStartIdx];\n        }\n        else {\n            // Here we do some checks to match up old and new nodes based on the\n            // `$key$` attribute, which is set by putting a `key=\"my-key\"` attribute\n            // in the JSX for a DOM element in the implementation of a Stencil\n            // component.\n            //\n            // First we check to see if there are any nodes in the array of old\n            // children which have the same key as the first node in the new\n            // children.\n            idxInOld = -1;\n            {\n                for (i = oldStartIdx; i <= oldEndIdx; ++i) {\n                    if (oldCh[i] && oldCh[i].$key$ !== null && oldCh[i].$key$ === newStartVnode.$key$) {\n                        idxInOld = i;\n                        break;\n                    }\n                }\n            }\n            if (idxInOld >= 0) {\n                // We found a node in the old children which matches up with the first\n                // node in the new children! So let's deal with that\n                elmToMove = oldCh[idxInOld];\n                if (elmToMove.$tag$ !== newStartVnode.$tag$) {\n                    // the tag doesn't match so we'll need a new DOM element\n                    node = createElm(oldCh && oldCh[newStartIdx], newVNode, idxInOld, parentElm);\n                }\n                else {\n                    patch(elmToMove, newStartVnode);\n                    // invalidate the matching old node so that we won't try to update it\n                    // again later on\n                    oldCh[idxInOld] = undefined;\n                    node = elmToMove.$elm$;\n                }\n                newStartVnode = newCh[++newStartIdx];\n            }\n            else {\n                // We either didn't find an element in the old children that matches\n                // the key of the first new child OR the build is not using `key`\n                // attributes at all. In either case we need to create a new element\n                // for the new node.\n                node = createElm(oldCh && oldCh[newStartIdx], newVNode, newStartIdx, parentElm);\n                newStartVnode = newCh[++newStartIdx];\n            }\n            if (node) {\n                // if we created a new node then handle inserting it to the DOM\n                {\n                    parentReferenceNode(oldStartVnode.$elm$).insertBefore(node, referenceNode(oldStartVnode.$elm$));\n                }\n            }\n        }\n    }\n    if (oldStartIdx > oldEndIdx) {\n        // we have some more new nodes to add which don't match up with old nodes\n        addVnodes(parentElm, newCh[newEndIdx + 1] == null ? null : newCh[newEndIdx + 1].$elm$, newVNode, newCh, newStartIdx, newEndIdx);\n    }\n    else if (newStartIdx > newEndIdx) {\n        // there are nodes in the `oldCh` array which no longer correspond to nodes\n        // in the new array, so lets remove them (which entails cleaning up the\n        // relevant DOM nodes)\n        removeVnodes(oldCh, oldStartIdx, oldEndIdx);\n    }\n};\n/**\n * Compare two VNodes to determine if they are the same\n *\n * **NB**: This function is an equality _heuristic_ based on the available\n * information set on the two VNodes and can be misleading under certain\n * circumstances. In particular, if the two nodes do not have `key` attrs\n * (available under `$key$` on VNodes) then the function falls back on merely\n * checking that they have the same tag.\n *\n * So, in other words, if `key` attrs are not set on VNodes which may be\n * changing order within a `children` array or something along those lines then\n * we could obtain a false positive and then have to do needless re-rendering.\n *\n * @param leftVNode the first VNode to check\n * @param rightVNode the second VNode to check\n * @returns whether they're equal or not\n */\nconst isSameVnode = (leftVNode, rightVNode) => {\n    // compare if two vnode to see if they're \"technically\" the same\n    // need to have the same element tag, and same key to be the same\n    if (leftVNode.$tag$ === rightVNode.$tag$) {\n        if (leftVNode.$tag$ === 'slot') {\n            return leftVNode.$name$ === rightVNode.$name$;\n        }\n        // this will be set if components in the build have `key` attrs set on them\n        {\n            return leftVNode.$key$ === rightVNode.$key$;\n        }\n    }\n    return false;\n};\nconst referenceNode = (node) => {\n    // this node was relocated to a new location in the dom\n    // because of some other component's slot\n    // but we still have an html comment in place of where\n    // it's original location was according to it's original vdom\n    return (node && node['s-ol']) || node;\n};\nconst parentReferenceNode = (node) => (node['s-ol'] ? node['s-ol'] : node).parentNode;\n/**\n * Handle reconciling an outdated VNode with a new one which corresponds to\n * it. This function handles flushing updates to the DOM and reconciling the\n * children of the two nodes (if any).\n *\n * @param oldVNode an old VNode whose DOM element and children we want to update\n * @param newVNode a new VNode representing an updated version of the old one\n */\nconst patch = (oldVNode, newVNode) => {\n    const elm = (newVNode.$elm$ = oldVNode.$elm$);\n    const oldChildren = oldVNode.$children$;\n    const newChildren = newVNode.$children$;\n    const tag = newVNode.$tag$;\n    const text = newVNode.$text$;\n    let defaultHolder;\n    if (text === null) {\n        {\n            // test if we're rendering an svg element, or still rendering nodes inside of one\n            // only add this to the when the compiler sees we're using an svg somewhere\n            isSvgMode = tag === 'svg' ? true : tag === 'foreignObject' ? false : isSvgMode;\n        }\n        {\n            if (tag === 'slot')\n                ;\n            else {\n                // either this is the first render of an element OR it's an update\n                // AND we already know it's possible it could have changed\n                // this updates the element's css classes, attrs, props, listeners, etc.\n                updateElement(oldVNode, newVNode, isSvgMode);\n            }\n        }\n        if (oldChildren !== null && newChildren !== null) {\n            // looks like there's child vnodes for both the old and new vnodes\n            // so we need to call `updateChildren` to reconcile them\n            updateChildren(elm, oldChildren, newVNode, newChildren);\n        }\n        else if (newChildren !== null) {\n            // no old child vnodes, but there are new child vnodes to add\n            if (oldVNode.$text$ !== null) {\n                // the old vnode was text, so be sure to clear it out\n                elm.textContent = '';\n            }\n            // add the new vnode children\n            addVnodes(elm, null, newVNode, newChildren, 0, newChildren.length - 1);\n        }\n        else if (oldChildren !== null) {\n            // no new child vnodes, but there are old child vnodes to remove\n            removeVnodes(oldChildren, 0, oldChildren.length - 1);\n        }\n        if (isSvgMode && tag === 'svg') {\n            isSvgMode = false;\n        }\n    }\n    else if ((defaultHolder = elm['s-cr'])) {\n        // this element has slotted content\n        defaultHolder.parentNode.textContent = text;\n    }\n    else if (oldVNode.$text$ !== text) {\n        // update the text content for the text only vnode\n        // and also only if the text is different than before\n        elm.data = text;\n    }\n};\nconst updateFallbackSlotVisibility = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    const childNodes = elm.childNodes;\n    let childNode;\n    let i;\n    let ilen;\n    let j;\n    let slotNameAttr;\n    let nodeType;\n    for (i = 0, ilen = childNodes.length; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            if (childNode['s-sr']) {\n                // this is a slot fallback node\n                // get the slot name for this slot reference node\n                slotNameAttr = childNode['s-sn'];\n                // by default always show a fallback slot node\n                // then hide it if there are other slots in the light dom\n                childNode.hidden = false;\n                for (j = 0; j < ilen; j++) {\n                    nodeType = childNodes[j].nodeType;\n                    if (childNodes[j]['s-hn'] !== childNode['s-hn'] || slotNameAttr !== '') {\n                        // this sibling node is from a different component OR is a named fallback slot node\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ && slotNameAttr === childNodes[j].getAttribute('slot')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                    else {\n                        // this is a default fallback slot node\n                        // any element or text node (with content)\n                        // should hide the default fallback slot node\n                        if (nodeType === 1 /* NODE_TYPE.ElementNode */ ||\n                            (nodeType === 3 /* NODE_TYPE.TextNode */ && childNodes[j].textContent.trim() !== '')) {\n                            childNode.hidden = true;\n                            break;\n                        }\n                    }\n                }\n            }\n            // keep drilling down\n            updateFallbackSlotVisibility(childNode);\n        }\n    }\n};\nconst relocateNodes = [];\nconst relocateSlotContent = (elm) => {\n    // tslint:disable-next-line: prefer-const\n    let childNode;\n    let node;\n    let hostContentNodes;\n    let slotNameAttr;\n    let relocateNodeData;\n    let j;\n    let i = 0;\n    const childNodes = elm.childNodes;\n    const ilen = childNodes.length;\n    for (; i < ilen; i++) {\n        childNode = childNodes[i];\n        if (childNode['s-sr'] && (node = childNode['s-cr']) && node.parentNode) {\n            // first got the content reference comment node\n            // then we got it's parent, which is where all the host content is in now\n            hostContentNodes = node.parentNode.childNodes;\n            slotNameAttr = childNode['s-sn'];\n            for (j = hostContentNodes.length - 1; j >= 0; j--) {\n                node = hostContentNodes[j];\n                if (!node['s-cn'] && !node['s-nr'] && node['s-hn'] !== childNode['s-hn']) {\n                    // let's do some relocating to its new home\n                    // but never relocate a content reference node\n                    // that is suppose to always represent the original content location\n                    if (isNodeLocatedInSlot(node, slotNameAttr)) {\n                        // it's possible we've already decided to relocate this node\n                        relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                        // made some changes to slots\n                        // let's make sure we also double check\n                        // fallbacks are correctly hidden or shown\n                        checkSlotFallbackVisibility = true;\n                        node['s-sn'] = node['s-sn'] || slotNameAttr;\n                        if (relocateNodeData) {\n                            // previously we never found a slot home for this node\n                            // but turns out we did, so let's remember it now\n                            relocateNodeData.$slotRefNode$ = childNode;\n                        }\n                        else {\n                            // add to our list of nodes to relocate\n                            relocateNodes.push({\n                                $slotRefNode$: childNode,\n                                $nodeToRelocate$: node,\n                            });\n                        }\n                        if (node['s-sr']) {\n                            relocateNodes.map((relocateNode) => {\n                                if (isNodeLocatedInSlot(relocateNode.$nodeToRelocate$, node['s-sn'])) {\n                                    relocateNodeData = relocateNodes.find((r) => r.$nodeToRelocate$ === node);\n                                    if (relocateNodeData && !relocateNode.$slotRefNode$) {\n                                        relocateNode.$slotRefNode$ = relocateNodeData.$slotRefNode$;\n                                    }\n                                }\n                            });\n                        }\n                    }\n                    else if (!relocateNodes.some((r) => r.$nodeToRelocate$ === node)) {\n                        // so far this element does not have a slot home, not setting slotRefNode on purpose\n                        // if we never find a home for this element then we'll need to hide it\n                        relocateNodes.push({\n                            $nodeToRelocate$: node,\n                        });\n                    }\n                }\n            }\n        }\n        if (childNode.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n            relocateSlotContent(childNode);\n        }\n    }\n};\nconst isNodeLocatedInSlot = (nodeToRelocate, slotNameAttr) => {\n    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n        if (nodeToRelocate.getAttribute('slot') === null && slotNameAttr === '') {\n            return true;\n        }\n        if (nodeToRelocate.getAttribute('slot') === slotNameAttr) {\n            return true;\n        }\n        return false;\n    }\n    if (nodeToRelocate['s-sn'] === slotNameAttr) {\n        return true;\n    }\n    return slotNameAttr === '';\n};\nconst renderVdom = (hostRef, renderFnResults) => {\n    const hostElm = hostRef.$hostElement$;\n    const cmpMeta = hostRef.$cmpMeta$;\n    const oldVNode = hostRef.$vnode$ || newVNode(null, null);\n    const rootVnode = isHost(renderFnResults) ? renderFnResults : h(null, null, renderFnResults);\n    hostTagName = hostElm.tagName;\n    if (cmpMeta.$attrsToReflect$) {\n        rootVnode.$attrs$ = rootVnode.$attrs$ || {};\n        cmpMeta.$attrsToReflect$.map(([propName, attribute]) => (rootVnode.$attrs$[attribute] = hostElm[propName]));\n    }\n    rootVnode.$tag$ = null;\n    rootVnode.$flags$ |= 4 /* VNODE_FLAGS.isHost */;\n    hostRef.$vnode$ = rootVnode;\n    rootVnode.$elm$ = oldVNode.$elm$ = (hostElm.shadowRoot || hostElm );\n    {\n        scopeId = hostElm['s-sc'];\n    }\n    {\n        contentRef = hostElm['s-cr'];\n        useNativeShadowDom = (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) !== 0;\n        // always reset\n        checkSlotFallbackVisibility = false;\n    }\n    // synchronous patch\n    patch(oldVNode, rootVnode);\n    {\n        // while we're moving nodes around existing nodes, temporarily disable\n        // the disconnectCallback from working\n        plt.$flags$ |= 1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        if (checkSlotRelocate) {\n            relocateSlotContent(rootVnode.$elm$);\n            let relocateData;\n            let nodeToRelocate;\n            let orgLocationNode;\n            let parentNodeRef;\n            let insertBeforeNode;\n            let refNode;\n            let i = 0;\n            for (; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (!nodeToRelocate['s-ol']) {\n                    // add a reference node marking this node's original location\n                    // keep a reference to this node for later lookups\n                    orgLocationNode =\n                        doc.createTextNode('');\n                    orgLocationNode['s-nr'] = nodeToRelocate;\n                    nodeToRelocate.parentNode.insertBefore((nodeToRelocate['s-ol'] = orgLocationNode), nodeToRelocate);\n                }\n            }\n            for (i = 0; i < relocateNodes.length; i++) {\n                relocateData = relocateNodes[i];\n                nodeToRelocate = relocateData.$nodeToRelocate$;\n                if (relocateData.$slotRefNode$) {\n                    // by default we're just going to insert it directly\n                    // after the slot reference node\n                    parentNodeRef = relocateData.$slotRefNode$.parentNode;\n                    insertBeforeNode = relocateData.$slotRefNode$.nextSibling;\n                    orgLocationNode = nodeToRelocate['s-ol'];\n                    while ((orgLocationNode = orgLocationNode.previousSibling)) {\n                        refNode = orgLocationNode['s-nr'];\n                        if (refNode && refNode['s-sn'] === nodeToRelocate['s-sn'] && parentNodeRef === refNode.parentNode) {\n                            refNode = refNode.nextSibling;\n                            if (!refNode || !refNode['s-nr']) {\n                                insertBeforeNode = refNode;\n                                break;\n                            }\n                        }\n                    }\n                    if ((!insertBeforeNode && parentNodeRef !== nodeToRelocate.parentNode) ||\n                        nodeToRelocate.nextSibling !== insertBeforeNode) {\n                        // we've checked that it's worth while to relocate\n                        // since that the node to relocate\n                        // has a different next sibling or parent relocated\n                        if (nodeToRelocate !== insertBeforeNode) {\n                            if (!nodeToRelocate['s-hn'] && nodeToRelocate['s-ol']) {\n                                // probably a component in the index.html that doesn't have it's hostname set\n                                nodeToRelocate['s-hn'] = nodeToRelocate['s-ol'].parentNode.nodeName;\n                            }\n                            // add it back to the dom but in its new home\n                            parentNodeRef.insertBefore(nodeToRelocate, insertBeforeNode);\n                        }\n                    }\n                }\n                else {\n                    // this node doesn't have a slot home to go to, so let's hide it\n                    if (nodeToRelocate.nodeType === 1 /* NODE_TYPE.ElementNode */) {\n                        nodeToRelocate.hidden = true;\n                    }\n                }\n            }\n        }\n        if (checkSlotFallbackVisibility) {\n            updateFallbackSlotVisibility(rootVnode.$elm$);\n        }\n        // done moving nodes around\n        // allow the disconnect callback to work again\n        plt.$flags$ &= ~1 /* PLATFORM_FLAGS.isTmpDisconnected */;\n        // always reset\n        relocateNodes.length = 0;\n    }\n};\nconst attachToAncestor = (hostRef, ancestorComponent) => {\n    if (ancestorComponent && !hostRef.$onRenderResolve$ && ancestorComponent['s-p']) {\n        ancestorComponent['s-p'].push(new Promise((r) => (hostRef.$onRenderResolve$ = r)));\n    }\n};\nconst scheduleUpdate = (hostRef, isInitialLoad) => {\n    {\n        hostRef.$flags$ |= 16 /* HOST_FLAGS.isQueuedForUpdate */;\n    }\n    if (hostRef.$flags$ & 4 /* HOST_FLAGS.isWaitingForChildren */) {\n        hostRef.$flags$ |= 512 /* HOST_FLAGS.needsRerender */;\n        return;\n    }\n    attachToAncestor(hostRef, hostRef.$ancestorComponent$);\n    // there is no ancestor component or the ancestor component\n    // has already fired off its lifecycle update then\n    // fire off the initial update\n    const dispatch = () => dispatchHooks(hostRef, isInitialLoad);\n    return writeTask(dispatch) ;\n};\nconst dispatchHooks = (hostRef, isInitialLoad) => {\n    const endSchedule = createTime('scheduleUpdate', hostRef.$cmpMeta$.$tagName$);\n    const instance = hostRef.$lazyInstance$ ;\n    let promise;\n    endSchedule();\n    return then(promise, () => updateComponent(hostRef, instance, isInitialLoad));\n};\nconst updateComponent = async (hostRef, instance, isInitialLoad) => {\n    // updateComponent\n    const elm = hostRef.$hostElement$;\n    const endUpdate = createTime('update', hostRef.$cmpMeta$.$tagName$);\n    const rc = elm['s-rc'];\n    if (isInitialLoad) {\n        // DOM WRITE!\n        attachStyles(hostRef);\n    }\n    const endRender = createTime('render', hostRef.$cmpMeta$.$tagName$);\n    {\n        callRender(hostRef, instance);\n    }\n    if (rc) {\n        // ok, so turns out there are some child host elements\n        // waiting on this parent element to load\n        // let's fire off all update callbacks waiting\n        rc.map((cb) => cb());\n        elm['s-rc'] = undefined;\n    }\n    endRender();\n    endUpdate();\n    {\n        const childrenPromises = elm['s-p'];\n        const postUpdate = () => postUpdateComponent(hostRef);\n        if (childrenPromises.length === 0) {\n            postUpdate();\n        }\n        else {\n            Promise.all(childrenPromises).then(postUpdate);\n            hostRef.$flags$ |= 4 /* HOST_FLAGS.isWaitingForChildren */;\n            childrenPromises.length = 0;\n        }\n    }\n};\nconst callRender = (hostRef, instance, elm) => {\n    try {\n        instance = instance.render() ;\n        {\n            hostRef.$flags$ &= ~16 /* HOST_FLAGS.isQueuedForUpdate */;\n        }\n        {\n            hostRef.$flags$ |= 2 /* HOST_FLAGS.hasRendered */;\n        }\n        {\n            {\n                // looks like we've got child nodes to render into this host element\n                // or we need to update the css class/attrs on the host element\n                // DOM WRITE!\n                {\n                    renderVdom(hostRef, instance);\n                }\n            }\n        }\n    }\n    catch (e) {\n        consoleError(e, hostRef.$hostElement$);\n    }\n    return null;\n};\nconst postUpdateComponent = (hostRef) => {\n    const tagName = hostRef.$cmpMeta$.$tagName$;\n    const elm = hostRef.$hostElement$;\n    const endPostUpdate = createTime('postUpdate', tagName);\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    if (!(hostRef.$flags$ & 64 /* HOST_FLAGS.hasLoadedComponent */)) {\n        hostRef.$flags$ |= 64 /* HOST_FLAGS.hasLoadedComponent */;\n        {\n            // DOM WRITE!\n            addHydratedFlag(elm);\n        }\n        endPostUpdate();\n        {\n            hostRef.$onReadyResolve$(elm);\n            if (!ancestorComponent) {\n                appDidLoad();\n            }\n        }\n    }\n    else {\n        endPostUpdate();\n    }\n    // load events fire from bottom to top\n    // the deepest elements load first then bubbles up\n    {\n        if (hostRef.$onRenderResolve$) {\n            hostRef.$onRenderResolve$();\n            hostRef.$onRenderResolve$ = undefined;\n        }\n        if (hostRef.$flags$ & 512 /* HOST_FLAGS.needsRerender */) {\n            nextTick(() => scheduleUpdate(hostRef, false));\n        }\n        hostRef.$flags$ &= ~(4 /* HOST_FLAGS.isWaitingForChildren */ | 512 /* HOST_FLAGS.needsRerender */);\n    }\n    // ( •_•)\n    // ( •_•)>⌐■-■\n    // (⌐■_■)\n};\nconst appDidLoad = (who) => {\n    // on appload\n    // we have finish the first big initial render\n    {\n        addHydratedFlag(doc.documentElement);\n    }\n    nextTick(() => emitEvent(win, 'appload', { detail: { namespace: NAMESPACE } }));\n};\nconst then = (promise, thenFn) => {\n    return promise && promise.then ? promise.then(thenFn) : thenFn();\n};\nconst addHydratedFlag = (elm) => elm.classList.add('hydrated')\n    ;\nconst getValue = (ref, propName) => getHostRef(ref).$instanceValues$.get(propName);\nconst setValue = (ref, propName, newVal, cmpMeta) => {\n    // check our new property value against our internal value\n    const hostRef = getHostRef(ref);\n    const oldVal = hostRef.$instanceValues$.get(propName);\n    const flags = hostRef.$flags$;\n    const instance = hostRef.$lazyInstance$ ;\n    newVal = parsePropertyValue(newVal, cmpMeta.$members$[propName][0]);\n    // explicitly check for NaN on both sides, as `NaN === NaN` is always false\n    const areBothNaN = Number.isNaN(oldVal) && Number.isNaN(newVal);\n    const didValueChange = newVal !== oldVal && !areBothNaN;\n    if ((!(flags & 8 /* HOST_FLAGS.isConstructingInstance */) || oldVal === undefined) && didValueChange) {\n        // gadzooks! the property's value has changed!!\n        // set our new value!\n        hostRef.$instanceValues$.set(propName, newVal);\n        if (instance) {\n            if ((flags & (2 /* HOST_FLAGS.hasRendered */ | 16 /* HOST_FLAGS.isQueuedForUpdate */)) === 2 /* HOST_FLAGS.hasRendered */) {\n                // looks like this value actually changed, so we've got work to do!\n                // but only if we've already rendered, otherwise just chill out\n                // queue that we need to do an update, but don't worry about queuing\n                // up millions cuz this function ensures it only runs once\n                scheduleUpdate(hostRef, false);\n            }\n        }\n    }\n};\n/**\n * Attach a series of runtime constructs to a compiled Stencil component\n * constructor, including getters and setters for the `@Prop` and `@State`\n * decorators, callbacks for when attributes change, and so on.\n *\n * @param Cstr the constructor for a component that we need to process\n * @param cmpMeta metadata collected previously about the component\n * @param flags a number used to store a series of bit flags\n * @returns a reference to the same constructor passed in (but now mutated)\n */\nconst proxyComponent = (Cstr, cmpMeta, flags) => {\n    if (cmpMeta.$members$) {\n        // It's better to have a const than two Object.entries()\n        const members = Object.entries(cmpMeta.$members$);\n        const prototype = Cstr.prototype;\n        members.map(([memberName, [memberFlags]]) => {\n            if ((memberFlags & 31 /* MEMBER_FLAGS.Prop */ ||\n                    ((flags & 2 /* PROXY_FLAGS.proxyState */) && memberFlags & 32 /* MEMBER_FLAGS.State */))) {\n                // proxyComponent - prop\n                Object.defineProperty(prototype, memberName, {\n                    get() {\n                        // proxyComponent, get value\n                        return getValue(this, memberName);\n                    },\n                    set(newValue) {\n                        // proxyComponent, set value\n                        setValue(this, memberName, newValue, cmpMeta);\n                    },\n                    configurable: true,\n                    enumerable: true,\n                });\n            }\n        });\n        if ((flags & 1 /* PROXY_FLAGS.isElementConstructor */)) {\n            const attrNameToPropName = new Map();\n            prototype.attributeChangedCallback = function (attrName, _oldValue, newValue) {\n                plt.jmp(() => {\n                    const propName = attrNameToPropName.get(attrName);\n                    //  In a web component lifecycle the attributeChangedCallback runs prior to connectedCallback\n                    //  in the case where an attribute was set inline.\n                    //  ```html\n                    //    <my-component some-attribute=\"some-value\"></my-component>\n                    //  ```\n                    //\n                    //  There is an edge case where a developer sets the attribute inline on a custom element and then\n                    //  programmatically changes it before it has been upgraded as shown below:\n                    //\n                    //  ```html\n                    //    <!-- this component has _not_ been upgraded yet -->\n                    //    <my-component id=\"test\" some-attribute=\"some-value\"></my-component>\n                    //    <script>\n                    //      // grab non-upgraded component\n                    //      el = document.querySelector(\"#test\");\n                    //      el.someAttribute = \"another-value\";\n                    //      // upgrade component\n                    //      customElements.define('my-component', MyComponent);\n                    //    </script>\n                    //  ```\n                    //  In this case if we do not unshadow here and use the value of the shadowing property, attributeChangedCallback\n                    //  will be called with `newValue = \"some-value\"` and will set the shadowed property (this.someAttribute = \"another-value\")\n                    //  to the value that was set inline i.e. \"some-value\" from above example. When\n                    //  the connectedCallback attempts to unshadow it will use \"some-value\" as the initial value rather than \"another-value\"\n                    //\n                    //  The case where the attribute was NOT set inline but was not set programmatically shall be handled/unshadowed\n                    //  by connectedCallback as this attributeChangedCallback will not fire.\n                    //\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n                    //\n                    //  TODO(STENCIL-16) we should think about whether or not we actually want to be reflecting the attributes to\n                    //  properties here given that this goes against best practices outlined here\n                    //  https://developers.google.com/web/fundamentals/web-components/best-practices#avoid-reentrancy\n                    if (this.hasOwnProperty(propName)) {\n                        newValue = this[propName];\n                        delete this[propName];\n                    }\n                    else if (prototype.hasOwnProperty(propName) &&\n                        typeof this[propName] === 'number' &&\n                        this[propName] == newValue) {\n                        // if the propName exists on the prototype of `Cstr`, this update may be a result of Stencil using native\n                        // APIs to reflect props as attributes. Calls to `setAttribute(someElement, propName)` will result in\n                        // `propName` to be converted to a `DOMString`, which may not be what we want for other primitive props.\n                        return;\n                    }\n                    this[propName] = newValue === null && typeof this[propName] === 'boolean' ? false : newValue;\n                });\n            };\n            // create an array of attributes to observe\n            // and also create a map of html attribute name to js property name\n            Cstr.observedAttributes = members\n                .filter(([_, m]) => m[0] & 15 /* MEMBER_FLAGS.HasAttribute */) // filter to only keep props that should match attributes\n                .map(([propName, m]) => {\n                const attrName = m[1] || propName;\n                attrNameToPropName.set(attrName, propName);\n                if (m[0] & 512 /* MEMBER_FLAGS.ReflectAttr */) {\n                    cmpMeta.$attrsToReflect$.push([propName, attrName]);\n                }\n                return attrName;\n            });\n        }\n    }\n    return Cstr;\n};\nconst initializeComponent = async (elm, hostRef, cmpMeta, hmrVersionId, Cstr) => {\n    // initializeComponent\n    if ((hostRef.$flags$ & 32 /* HOST_FLAGS.hasInitializedComponent */) === 0) {\n        {\n            // we haven't initialized this element yet\n            hostRef.$flags$ |= 32 /* HOST_FLAGS.hasInitializedComponent */;\n            // lazy loaded components\n            // request the component's implementation to be\n            // wired up with the host element\n            Cstr = loadModule(cmpMeta);\n            if (Cstr.then) {\n                // Await creates a micro-task avoid if possible\n                const endLoad = uniqueTime();\n                Cstr = await Cstr;\n                endLoad();\n            }\n            if (!Cstr.isProxied) {\n                proxyComponent(Cstr, cmpMeta, 2 /* PROXY_FLAGS.proxyState */);\n                Cstr.isProxied = true;\n            }\n            const endNewInstance = createTime('createInstance', cmpMeta.$tagName$);\n            // ok, time to construct the instance\n            // but let's keep track of when we start and stop\n            // so that the getters/setters don't incorrectly step on data\n            {\n                hostRef.$flags$ |= 8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            // construct the lazy-loaded component implementation\n            // passing the hostRef is very important during\n            // construction in order to directly wire together the\n            // host element and the lazy-loaded instance\n            try {\n                new Cstr(hostRef);\n            }\n            catch (e) {\n                consoleError(e);\n            }\n            {\n                hostRef.$flags$ &= ~8 /* HOST_FLAGS.isConstructingInstance */;\n            }\n            endNewInstance();\n        }\n        if (Cstr.style) {\n            // this component has styles but we haven't registered them yet\n            let style = Cstr.style;\n            const scopeId = getScopeId(cmpMeta);\n            if (!styles.has(scopeId)) {\n                const endRegisterStyles = createTime('registerStyles', cmpMeta.$tagName$);\n                registerStyle(scopeId, style, !!(cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */));\n                endRegisterStyles();\n            }\n        }\n    }\n    // we've successfully created a lazy instance\n    const ancestorComponent = hostRef.$ancestorComponent$;\n    const schedule = () => scheduleUpdate(hostRef, true);\n    if (ancestorComponent && ancestorComponent['s-rc']) {\n        // this is the initial load and this component it has an ancestor component\n        // but the ancestor component has NOT fired its will update lifecycle yet\n        // so let's just cool our jets and wait for the ancestor to continue first\n        // this will get fired off when the ancestor component\n        // finally gets around to rendering its lazy self\n        // fire off the initial update\n        ancestorComponent['s-rc'].push(schedule);\n    }\n    else {\n        schedule();\n    }\n};\nconst connectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        const hostRef = getHostRef(elm);\n        const cmpMeta = hostRef.$cmpMeta$;\n        const endConnected = createTime('connectedCallback', cmpMeta.$tagName$);\n        if (!(hostRef.$flags$ & 1 /* HOST_FLAGS.hasConnected */)) {\n            // first time this component has connected\n            hostRef.$flags$ |= 1 /* HOST_FLAGS.hasConnected */;\n            {\n                // initUpdate\n                // if the slot polyfill is required we'll need to put some nodes\n                // in here to act as original content anchors as we move nodes around\n                // host element has been connected to the DOM\n                if ((cmpMeta.$flags$ & (4 /* CMP_FLAGS.hasSlotRelocation */ | 8 /* CMP_FLAGS.needsShadowDomShim */))) {\n                    setContentReference(elm);\n                }\n            }\n            {\n                // find the first ancestor component (if there is one) and register\n                // this component as one of the actively loading child components for its ancestor\n                let ancestorComponent = elm;\n                while ((ancestorComponent = ancestorComponent.parentNode || ancestorComponent.host)) {\n                    // climb up the ancestors looking for the first\n                    // component that hasn't finished its lifecycle update yet\n                    if (ancestorComponent['s-p']) {\n                        // we found this components first ancestor component\n                        // keep a reference to this component's ancestor component\n                        attachToAncestor(hostRef, (hostRef.$ancestorComponent$ = ancestorComponent));\n                        break;\n                    }\n                }\n            }\n            // Lazy properties\n            // https://developers.google.com/web/fundamentals/web-components/best-practices#lazy-properties\n            if (cmpMeta.$members$) {\n                Object.entries(cmpMeta.$members$).map(([memberName, [memberFlags]]) => {\n                    if (memberFlags & 31 /* MEMBER_FLAGS.Prop */ && elm.hasOwnProperty(memberName)) {\n                        const value = elm[memberName];\n                        delete elm[memberName];\n                        elm[memberName] = value;\n                    }\n                });\n            }\n            {\n                initializeComponent(elm, hostRef, cmpMeta);\n            }\n        }\n        endConnected();\n    }\n};\nconst setContentReference = (elm) => {\n    // only required when we're NOT using native shadow dom (slot)\n    // or this browser doesn't support native shadow dom\n    // and this host element was NOT created with SSR\n    // let's pick out the inner content for slot projection\n    // create a node to represent where the original\n    // content was first placed, which is useful later on\n    const contentRefElm = (elm['s-cr'] = doc.createComment(''));\n    contentRefElm['s-cn'] = true;\n    elm.insertBefore(contentRefElm, elm.firstChild);\n};\nconst disconnectedCallback = (elm) => {\n    if ((plt.$flags$ & 1 /* PLATFORM_FLAGS.isTmpDisconnected */) === 0) {\n        getHostRef(elm);\n    }\n};\nconst bootstrapLazy = (lazyBundles, options = {}) => {\n    const endBootstrap = createTime();\n    const cmpTags = [];\n    const exclude = options.exclude || [];\n    const customElements = win.customElements;\n    const head = doc.head;\n    const metaCharset = /*@__PURE__*/ head.querySelector('meta[charset]');\n    const visibilityStyle = /*@__PURE__*/ doc.createElement('style');\n    const deferredConnectedCallbacks = [];\n    let appLoadFallback;\n    let isBootstrapping = true;\n    Object.assign(plt, options);\n    plt.$resourcesUrl$ = new URL(options.resourcesUrl || './', doc.baseURI).href;\n    lazyBundles.map((lazyBundle) => {\n        lazyBundle[1].map((compactMeta) => {\n            const cmpMeta = {\n                $flags$: compactMeta[0],\n                $tagName$: compactMeta[1],\n                $members$: compactMeta[2],\n                $listeners$: compactMeta[3],\n            };\n            {\n                cmpMeta.$members$ = compactMeta[2];\n            }\n            {\n                cmpMeta.$attrsToReflect$ = [];\n            }\n            const tagName = cmpMeta.$tagName$;\n            const HostElement = class extends HTMLElement {\n                // StencilLazyHost\n                constructor(self) {\n                    // @ts-ignore\n                    super(self);\n                    self = this;\n                    registerHost(self, cmpMeta);\n                    if (cmpMeta.$flags$ & 1 /* CMP_FLAGS.shadowDomEncapsulation */) {\n                        // this component is using shadow dom\n                        // and this browser supports shadow dom\n                        // add the read-only property \"shadowRoot\" to the host element\n                        // adding the shadow root build conditionals to minimize runtime\n                        {\n                            {\n                                self.attachShadow({ mode: 'open' });\n                            }\n                        }\n                    }\n                }\n                connectedCallback() {\n                    if (appLoadFallback) {\n                        clearTimeout(appLoadFallback);\n                        appLoadFallback = null;\n                    }\n                    if (isBootstrapping) {\n                        // connectedCallback will be processed once all components have been registered\n                        deferredConnectedCallbacks.push(this);\n                    }\n                    else {\n                        plt.jmp(() => connectedCallback(this));\n                    }\n                }\n                disconnectedCallback() {\n                    plt.jmp(() => disconnectedCallback(this));\n                }\n                componentOnReady() {\n                    return getHostRef(this).$onReadyPromise$;\n                }\n            };\n            cmpMeta.$lazyBundleId$ = lazyBundle[0];\n            if (!exclude.includes(tagName) && !customElements.get(tagName)) {\n                cmpTags.push(tagName);\n                customElements.define(tagName, proxyComponent(HostElement, cmpMeta, 1 /* PROXY_FLAGS.isElementConstructor */));\n            }\n        });\n    });\n    {\n        visibilityStyle.innerHTML = cmpTags + HYDRATED_CSS;\n        visibilityStyle.setAttribute('data-styles', '');\n        const nonceElm = visibilityStyle.ownerDocument.querySelector('style[nonce]');\n        if (nonceElm) {\n          visibilityStyle.setAttribute('nonce', nonceElm.getAttribute('nonce'));\n        }\n        head.insertBefore(visibilityStyle, metaCharset ? metaCharset.nextSibling : head.firstChild);\n    }\n    // Process deferred connectedCallbacks now all components have been registered\n    isBootstrapping = false;\n    if (deferredConnectedCallbacks.length) {\n        deferredConnectedCallbacks.map((host) => host.connectedCallback());\n    }\n    else {\n        {\n            plt.jmp(() => (appLoadFallback = setTimeout(appDidLoad, 30)));\n        }\n    }\n    // Fallback appLoad event\n    endBootstrap();\n};\nconst hostRefs = /*@__PURE__*/ new WeakMap();\nconst getHostRef = (ref) => hostRefs.get(ref);\nconst registerInstance = (lazyInstance, hostRef) => hostRefs.set((hostRef.$lazyInstance$ = lazyInstance), hostRef);\nconst registerHost = (elm, cmpMeta) => {\n    const hostRef = {\n        $flags$: 0,\n        $hostElement$: elm,\n        $cmpMeta$: cmpMeta,\n        $instanceValues$: new Map(),\n    };\n    {\n        hostRef.$onReadyPromise$ = new Promise((r) => (hostRef.$onReadyResolve$ = r));\n        elm['s-p'] = [];\n        elm['s-rc'] = [];\n    }\n    return hostRefs.set(elm, hostRef);\n};\nconst isMemberInElement = (elm, memberName) => memberName in elm;\nconst consoleError = (e, el) => (0, console.error)(e, el);\nconst cmpModules = /*@__PURE__*/ new Map();\nconst loadModule = (cmpMeta, hostRef, hmrVersionId) => {\n    // loadModuleImport\n    const exportName = cmpMeta.$tagName$.replace(/-/g, '_');\n    const bundleId = cmpMeta.$lazyBundleId$;\n    const module = cmpModules.get(bundleId) ;\n    if (module) {\n        return module[exportName];\n    }\n    /*!__STENCIL_STATIC_IMPORT_SWITCH__*/\n    return import(\n    /* @vite-ignore */\n    /* webpackInclude: /\\.entry\\.js$/ */\n    /* webpackExclude: /\\.system\\.entry\\.js$/ */\n    /* webpackMode: \"lazy\" */\n    `./${bundleId}.entry.js${''}`).then((importedModule) => {\n        {\n            cmpModules.set(bundleId, importedModule);\n        }\n        return importedModule[exportName];\n    }, consoleError);\n};\nconst styles = /*@__PURE__*/ new Map();\nconst win = typeof window !== 'undefined' ? window : {};\nconst doc = win.document || { head: {} };\nconst plt = {\n    $flags$: 0,\n    $resourcesUrl$: '',\n    jmp: (h) => h(),\n    raf: (h) => requestAnimationFrame(h),\n    ael: (el, eventName, listener, opts) => el.addEventListener(eventName, listener, opts),\n    rel: (el, eventName, listener, opts) => el.removeEventListener(eventName, listener, opts),\n    ce: (eventName, opts) => new CustomEvent(eventName, opts),\n};\nconst promiseResolve = (v) => Promise.resolve(v);\nconst supportsConstructableStylesheets = /*@__PURE__*/ (() => {\n        try {\n            new CSSStyleSheet();\n            return typeof new CSSStyleSheet().replaceSync === 'function';\n        }\n        catch (e) { }\n        return false;\n    })()\n    ;\nconst queueDomReads = [];\nconst queueDomWrites = [];\nconst queueTask = (queue, write) => (cb) => {\n    queue.push(cb);\n    if (!queuePending) {\n        queuePending = true;\n        if (write && plt.$flags$ & 4 /* PLATFORM_FLAGS.queueSync */) {\n            nextTick(flush);\n        }\n        else {\n            plt.raf(flush);\n        }\n    }\n};\nconst consume = (queue) => {\n    for (let i = 0; i < queue.length; i++) {\n        try {\n            queue[i](performance.now());\n        }\n        catch (e) {\n            consoleError(e);\n        }\n    }\n    queue.length = 0;\n};\nconst flush = () => {\n    // always force a bunch of medium callbacks to run, but still have\n    // a throttle on how many can run in a certain time\n    // DOM READS!!!\n    consume(queueDomReads);\n    // DOM WRITES!!!\n    {\n        consume(queueDomWrites);\n        if ((queuePending = queueDomReads.length > 0)) {\n            // still more to do yet, but we've run out of time\n            // let's let this thing cool off and try again in the next tick\n            plt.raf(flush);\n        }\n    }\n};\nconst nextTick = /*@__PURE__*/ (cb) => promiseResolve().then(cb);\nconst writeTask = /*@__PURE__*/ queueTask(queueDomWrites, true);\n\nexport { Host as H, bootstrapLazy as b, createEvent as c, getElement as g, h, promiseResolve as p, registerInstance as r };\n"],"names":["NAMESPACE","scopeId","contentRef","hostTagName","useNativeShadowDom","checkSlotFallbackVisibility","checkSlotRelocate","isSvgMode","queuePending","createTime","fnName","tagName","uniqueTime","key","measureText","HYDRATED_CSS","EMPTY_OBJ","SVG_NS","HTML_NS","isDef","v","isComplexType","o","h","nodeName","vnodeData","children","child","slotName","simple","lastSimple","vNodeChildren","walk","c","i","newVNode","classData","k","vnode","tag","text","Host","isHost","node","parsePropertyValue","propValue","propType","getElement","ref","getHostRef","createEvent","name","flags","elm","detail","emitEvent","opts","ev","plt","rootAppliedStyles","registerStyle","cssText","allowCS","style","styles","supportsConstructableStylesheets","addStyle","styleContainerNode","cmpMeta","mode","hostElm","getScopeId","doc","appliedStyles","styleElm","nonceElm","attachStyles","hostRef","endAttachStyles","cmp","setAccessor","memberName","oldValue","newValue","isSvg","isProp","isMemberInElement","ln","classList","oldClasses","parseClassList","newClasses","win","isComplex","n","parseClassListRegex","value","updateElement","oldVnode","newVnode","oldVnodeAttrs","newVnodeAttrs","createElm","oldParentVNode","newParentVNode","childIndex","parentElm","childNode","oldVNode","putBackInOriginalLocation","recursive","oldSlotChildNodes","parentReferenceNode","referenceNode","addVnodes","before","parentVNode","vnodes","startIdx","endIdx","containerElm","removeVnodes","updateChildren","oldCh","newCh","oldStartIdx","newStartIdx","idxInOld","oldEndIdx","oldStartVnode","oldEndVnode","newEndIdx","newStartVnode","newEndVnode","elmToMove","isSameVnode","patch","leftVNode","rightVNode","oldChildren","newChildren","defaultHolder","updateFallbackSlotVisibility","childNodes","ilen","j","slotNameAttr","nodeType","relocateNodes","relocateSlotContent","hostContentNodes","relocateNodeData","isNodeLocatedInSlot","r","relocateNode","nodeToRelocate","renderVdom","renderFnResults","rootVnode","propName","attribute","relocateData","orgLocationNode","parentNodeRef","insertBeforeNode","refNode","attachToAncestor","ancestorComponent","scheduleUpdate","isInitialLoad","writeTask","dispatchHooks","endSchedule","instance","promise","then","updateComponent","endUpdate","rc","endRender","callRender","cb","childrenPromises","postUpdate","postUpdateComponent","e","consoleError","endPostUpdate","addHydratedFlag","appDidLoad","nextTick","who","thenFn","getValue","setValue","newVal","oldVal","areBothNaN","didValueChange","proxyComponent","Cstr","members","prototype","memberFlags","attrNameToPropName","attrName","_oldValue","m","initializeComponent","hmrVersionId","loadModule","endLoad","endNewInstance","endRegisterStyles","schedule","connectedCallback","endConnected","setContentReference","contentRefElm","disconnectedCallback","bootstrapLazy","lazyBundles","options","endBootstrap","cmpTags","exclude","customElements","head","metaCharset","visibilityStyle","deferredConnectedCallbacks","appLoadFallback","isBootstrapping","lazyBundle","compactMeta","HostElement","self","registerHost","host","hostRefs","registerInstance","lazyInstance","el","cmpModules","exportName","bundleId","module","__variableDynamicImportRuntimeHelper","importedModule","eventName","listener","promiseResolve","queueDomReads","queueDomWrites","queueTask","queue","write","flush","consume"],"mappings":"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"}