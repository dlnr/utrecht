"use strict";(self.webpackChunk_utrecht_storybook=self.webpackChunk_utrecht_storybook||[]).push([[6933],{"../../node_modules/.pnpm/@mdx-js+react@2.3.0_react@18.2.0/node_modules/@mdx-js/react/lib/index.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{NF:()=>withMDXComponents,Zo:()=>MDXProvider,ah:()=>useMDXComponents,pC:()=>MDXContext});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js");const MDXContext=react__WEBPACK_IMPORTED_MODULE_0__.createContext({});function withMDXComponents(Component){return function boundMDXComponent(props){const allComponents=useMDXComponents(props.components);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(Component,{...props,allComponents})}}function useMDXComponents(components){const contextComponents=react__WEBPACK_IMPORTED_MODULE_0__.useContext(MDXContext);return react__WEBPACK_IMPORTED_MODULE_0__.useMemo((()=>"function"==typeof components?components(contextComponents):{...contextComponents,...components}),[contextComponents,components])}const emptyObject={};function MDXProvider({components,children,disableParentContext}){let allComponents;return allComponents=disableParentContext?"function"==typeof components?components({}):components||emptyObject:useMDXComponents(components),react__WEBPACK_IMPORTED_MODULE_0__.createElement(MDXContext.Provider,{value:allComponents},children)}},"./stories/nl-design-system/contributing-css.stories.mdx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{__page:()=>__page,default:()=>contributing_css_stories});__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/index.js");var lib=__webpack_require__("../../node_modules/.pnpm/@mdx-js+react@2.3.0_react@18.2.0/node_modules/@mdx-js/react/lib/index.js"),dist=__webpack_require__("../../node_modules/.pnpm/@storybook+blocks@7.4.6_@types+react-dom@18.2.17_@types+react@18.2.42_react-dom@18.2.0_react@18.2.0/node_modules/@storybook/blocks/dist/index.mjs");const contributing_cssraw_namespaceObject='\x3c!-- @license CC0-1.0 --\x3e\n\n# Contribution Guidelines for CSS\n\n## Configure your code editor to catch mistakes early\n\nInstall plugins for color coding of CSS and SCSS:\n\n- Sublime: [`SCSS`](https://github.com/MarioRicalde/SCSS.tmbundle)\n\n## Use Stylelint to maintain consistency and high quality\n\nStylelint can run in your code editor while working on CSS code, by installing an extension:\n\n- VS Code: [stylelint](https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint)\n- Sublime: [`SublimeLinter-stylelint`](https://packagecontrol.io/packages/SublimeLinter-stylelint)\n\nStylelint will run as Git pre-commit hook, so it will warn you if you commit code that needs changes still. When that happens you can fix the code, stage and commit the file to Git again.\n\nStylelint will run in GitHub as PR check, so it will prevent your code from merging.\n\n## Order imports alphabetically to avoid merge conflicts\n\nOrder imports alphabetically.\n\nAdding all new imports at the end of the list is a method that will result in a merge conflict when two PRs add a new import at the same time.\n\nDon\'t:\n\n```scss\n@import "component-y";\n@import "component-b";\n@import "component-p";\n@import "component-new";\n```\n\nDo:\n\n```scss\n@import "component-b";\n@import "component-new";\n@import "component-p";\n@import "component-y";\n```\n\n## Define `margin` and `padding` in the modern way\n\nThe layout should work equally well in pages with right-to-left text direction for Arabic script, as in pages with left-to-right text for typical European languages and Latin script. This means using `-left` and `-right` is best avoided in many cases, because the values would need to be inversed for the other text direction.\n\nCSS now offers alternatives that work for all text directions, and are inversed automatically depending on the context. The new method also makes `-top` and `-bottom` obsolete, because the new CSS properties are also agnostic for the [vertical text direction in East Asian scripts](https://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts).\n\nFor pages with Latin scripts you should use the following alternatives:\n\n- `margin` shorthand should not be used\n- `margin-top` becomes `margin-block-start`\n- `margin-right` becomes `margin-inline-end`\n- `margin-bottom` becomes `margin-block-end`\n- `margin-left` becomes `margin-inline-start`\n- `padding` shorthand should not be used\n- `padding-top` becomes `padding-block-start`\n- `padding-right` becomes `padding-inline-end`\n- `padding-bottom` becomes `padding-block-end`\n- `padding-left` becomes `padding-inline-start`\n\nDo not use the the following new shorthands yet, since they don\'t have great browser support at the moment:\n\n- `margin-block` ([Can I use …?](https://caniuse.com/mdn-css_properties_margin-block))\n- `margin-inline` ([Can I use …?](https://caniuse.com/mdn-css_properties_margin-inline))\n- `padding-block` ([Can I use …?](https://caniuse.com/mdn-css_properties_padding-block))\n- `padding-inline` ([Can I use …?](https://caniuse.com/mdn-css_properties_padding-inline))\n\nThe following article may be of interest, if you want to know more about these new CSS properties:\n\n- [Digging Into CSS Logical Properties, by Ahmad Shadeed](https://ishadeed.com/article/css-logical-properties/)\n\n## Use BEM class names to structure your component\n\nDon\'t use BEM syntax for CSS variables, however:\n\n```css\n.example-card__heading {\n  color: var(--example-card__heading-color);\n}\n```\n\nOnly use dashes to separate segments of the CSS variable name:\n\n```css\n.example-card__heading {\n  color: var(--example-card-heading-color);\n}\n```\n\n- [BEM — Block Element Modifier](http://getbem.com)\n\n## Separately define vanilla HTML element selectors\n\nIf you need to style HTML elements without class names, define those selectors in a separate file. For example:\n\n`css/index.css`\n\n```css\n.nl-link {\n  color: var(--nl-link-color);\n}\n\n.nl-link--focus {\n  color: var(--nl-link-focus-color);\n}\n```\n\n`html.scss`:\n\n```scss\n@import "../css";\n\na {\n  @extend .nl-link;\n}\n\na:focus {\n  @extend .nl-link--focus;\n}\n```\n\nHaving a file with only BEM class name selectors will help making your layout reusable in other components and other component libraries.\n\n## Separately define the CSS variable values from the layout\n\nDo not include the custom properties that define your theme in the same file that defines the layout of a component:\n\n`components/link.css`:\n\n```css\n.nl-link {\n  color: var(--nl-link-color);\n}\n```\n\n`theme/link.css`:\n\n```css\n:root {\n  --nl-link-color: cornflowerblue;\n}\n```\n\nThis way, others that don\'t use the same theme as you, can only include the `component.css` and configure their own theme.\n\n## Use a prefix for your project in class names and CSS variables\n\nStart all the names in your code with the same prefix that identifies your project. When others want to reuse your code, they will not have any issues with their and your code using identical names -- they will never clash because of the prefix.\n\nPrefixes make names bit longer, but give you a great advantage for exchanging code between projects and collaborating with other teams.\n\nFor example, a `xyz` prefix for class names:\n\n```css\n.xyz-link {\n  color: blue;\n}\n```\n\nFor example, a `xyz` prefix for CSS variables:\n\n```css\na {\n  color: var(--xyz-link-color);\n}\n```\n\nPrefixes can be long or short, but you should be careful to pick something that is likely to be unique amongst the project which you want to collaborate.\n\n## Use prefixed CSS variables from other projects, share and enjoy the work of others\n\nWhen another project already has component or a CSS variable that does exactly what you need, you don\'t have to create one yourself with your own prefix. You can simply reuse the CSS variable with the prefix from the original author. **It is okay to have many prefixes in one file!**\n\n```css\n.example-component {\n  font-family: var(--example-component-font-family, var(--nl-document-font-family));\n}\n```\n\n## Use CSS variables for themable properties\n\nTo make your component reusable for many different themes and a wide variety of visual designs, you can use CSS variables to separate your choice for the visual design from the CSS code for the component.\n\nCSS properties that have different values for different themes should be configured with a CSS variable instead of a hardcoded value. Typical properties are related to color and typography, and often spacing too.\n\nCSS properties that don\'t vary between themes, don\'t need a CSS variable. Variables that typically have a hardcoded value include `display`, `position`, et cetera.\n\nYour initial version of a component does not need to provide a CSS variable for every imaginable property, it is recommended to start out with fewer properties and add new CSS variables on request.\n\n```css\n.example-icon {\n  display: inline-block;\n}\n\n.example-icon,\n.example-icon--medium {\n  height: var(--example-icon-medium-height);\n  width: var(--example-icon-medium-width);\n}\n```\n\n## Name things after their purpose, not after the visual design\n\nDo not use the visual design in the naming of class names:\n\n```css\n.example-badge--maroon {\n  color: maroon;\n}\n```\n\nName the class name after the purpose instead:\n\n```css\n.example-badge--danger {\n  color: maroon;\n}\n```\n\n## Don\'t affect the layout outside your component: margins are opt-in\n\nAnother aspect of keeping your component CSS side-effect free is by specifying `margin` as `0` by default, and allow to enable it optionally using `--utrecht-space-around: 1`.\n\n```css\n.example-paragraph {\n  font-size: var(--example-paragraph-font-size);\n  margin-block-start: calc(var(--utrecht-space-between, 0) * var(--example-paragraph-margin-block-start, 0));\n}\n```\n\n## Include fallback values for CSS variables so making a theme is less time consuming\n\nIf you allow customization for a property with CSS variables, it can be convenient to have a fallback value so you don\'t have to specify _every_ custom property to make the theme work.\n\nFor example, for colors you can use `inherit` to keep the color unchanged from the parent element when the CSS variable is undefined:\n\n```css\n.example-heading {\n  color: var(--example-heading-color, inherit);\n}\n```\n\nIncluding fallback values will make it easier to create a theme for your components, because others need to specify much fewer properties to make the initial version work well.\n\n## Use only relative font sizes\n\nDo not use `px` font sizes:\n\n```css\n:root {\n  font-size: 10px;\n}\n\np {\n  font-size: 1.6rem;\n}\n```\n\nUse a relative font size instead.\n\n```css\n:root {\n  font-size: 62.5%;\n}\n\np {\n  font-size: 1.6rem;\n}\n```\n\nRelative font sizes don\'t offer the guarantuee the website looks the same on every browser, and that is okay. Relative font sizes offer the freedom to users to choose a larger default font-size when the 16px default size is too small to read, without affecting other parts of the layout and image sizes -- which would cause even less text content to fit on the screen.\n\nPage zoom is very convenient in many cases, but it is not the best solution for users that only want larger text.\n\n## Avoid nesting BEM class name selectors\n\nFor example:\n\n```html\n<ul class="example-nav">\n  <li class="example-nav__item example-nav__item--current">\n    <a class="example-nav__link" href="/">Home</a>\n  </li>\n  <li class="example-nav__item">\n    <a class="example-nav__link" href="/contact">Home</a>\n  </li>\n</ul>\n```\n\nThe nesting in this example can be avoided:\n\n```css\n.example-nav__item--current .example-nav__link {\n  font-weight: bold;\n}\n```\n\nUpdate the template and include the `current` modifier for both elements:\n\n```html\n<li class="example-nav__item example-nav__item--current">\n  <a class="example-nav__link example-nav__link--current" href="/">Home</a>\n</li>\n```\n\nWith the modfier available for both elements, the nesting is no longer necessary.\n\n```css\n.example-nav__link--current {\n  font-weight: bold;\n}\n```\n\n## Include BEM modifier class names for pseudo-classes, even if you don\'t use them yourself\n\nInclude class names even for states for which CSS pseudo-classes are available, such as `focus` and `hover`:\n\n```css\n.example-link--hover {\n  text-decoration: underline;\n}\n\n.example-link--focus {\n  background-color: silver;\n}\n\n.example-link--visited {\n  color: purple;\n}\n```\n\nThese classes can be used for automated visual regression tests and automated accessibility tests. Including examples with these class names in Storybook will help keep track of every variant.\n\n```html\n<ul>\n  <li><a href="#" class="example-link">Example</a></li>\n  <li><a href="#" class="example-link example-link--hover">Example for :hover</a></li>\n  <li><a href="#" class="example-link example-link--focus">Example for :focus</a></li>\n  <li><a href="#" class="example-link example-link--visited">Example for :visited</a></li>\n</ul>\n```\n\n## Avoid short-hand properties that unintentionally override properties\n\n```css\n.example-card {\n  background: url("image.jpg");\n}\n```\n\nIn this example you can use `background-image` instead of `background`, and avoid resetting properties that might be defined elsewhere, such as `background-repeat` or `background-color`.\n\nThe same goes for `margin` in the following example:\n\n```css\nul {\n  margin: 0;\n}\n```\n\nThis example code is only used to reset the browsers\' built-in stylesheet for vertical margin. You can make the reset stylesheet more specific like this, with the same effect:\n\n```css\nul {\n  margin-block-start: 0;\n  margin-block-end: 0;\n}\n```\n\n## Round values to a reasonable significance\n\nDesign tools that export CSS sometimes include calculated subpixel values with a degree of detail that isn\'t visible on most screens and browsers, and wasn\'t necessarily intended by the designer.\n\n```css\n.example-paragraph {\n  font-size: 16.143px;\n}\n```\n\nRound the values to whole pixels:\n\n```css\n.example-paragraph {\n  font-size: 16px;\n}\n```\n\n## Include the open source license in every file\n\nInclude the [SPDX license code](https://spdx.org/licenses/) for the open source license in a code comment at the start of the file:\n\n```css\n/**\n * @license EUPL-1.2\n * Copyright (c) 2021 NL Design System Community\n */\n```\n\nMany open source license allow copying and modifying their code, but require the copyright notice to be included in all derived works. If you copy over open source code from a project with a EUPL-1.2 compatible license, such as the MIT license, be careful to copy over the copyright notice too.\n\nFor example, if you would copy over CSS from the [Bootstrap framework](https://getbootstrap.com), the code comment could look like this:\n\n```css\n/**\n * @license EUPL-1.2\n * Copyright (c) 2021 NL Design System Community\n * Copyright (c) 2011-2021 The Bootstrap Authors\n * Copyright (c) 2011-2021 Twitter, Inc.\n */\n```\n';var jsx_runtime=__webpack_require__("../../node_modules/.pnpm/react@18.2.0/node_modules/react/jsx-runtime.js");function _createMdxContent(props){return(0,jsx_runtime.jsxs)(jsx_runtime.Fragment,{children:[(0,jsx_runtime.jsx)(dist.h_,{title:"NL Design System/Contributing/CSS"}),"\n",(0,jsx_runtime.jsx)(dist.UG,{children:contributing_cssraw_namespaceObject})]})}const __page=()=>{throw new Error("Docs-only story")};__page.parameters={docsOnly:!0};const componentMeta={title:"NL Design System/Contributing/CSS",tags:["stories-mdx"],includeStories:["__page"]};componentMeta.parameters=componentMeta.parameters||{},componentMeta.parameters.docs={...componentMeta.parameters.docs||{},page:function MDXContent(props={}){const{wrapper:MDXLayout}=Object.assign({},(0,lib.ah)(),props.components);return MDXLayout?(0,jsx_runtime.jsx)(MDXLayout,{...props,children:(0,jsx_runtime.jsx)(_createMdxContent,{...props})}):_createMdxContent()}};const contributing_css_stories=componentMeta}}]);